{"version":3,"sources":["webpack:///./js/render.js","webpack:///./js/plot.js","webpack:///./js/fps.js","webpack:///./js/components/menu.js","webpack:///./js/components/ui.js","webpack:///./js/paint.js","webpack:///./js/components/info.js","webpack:///./js/app.js","webpack:///./js/shaderToy.js","webpack:///./js/index.js","webpack:///./js/glsl/sandVertex.glsl","webpack:///./js/glsl/sand.glsl","webpack:///./js/glsl/plot.glsl","webpack:///./crate/pkg/sandtable.js","webpack:///./js/setup.js","webpack:///./js/glsl/sky.glsl"],"names":["reglBuilder","require","window","memory","fsh","vsh","startWebGL","canvas","universe","isSnapshot","regl","attributes","preserveDrawingBuffer","width","height","cell_pointer","cells","light_pointer","lights","Uint8Array","buffer","dataTexture","texture","data","lightTexture","drawSand","blend","enable","func","srcRGB","srcAlpha","dstRGB","dstAlpha","equation","rgb","alpha","color","frag","uniforms","t","tick","light","resolution","viewportWidth","viewportHeight","dpi","devicePixelRatio","vert","position","count","poll","readingsIndex","n_readings","readings","fps","this","document","getElementById","frames","lastFrameTimeStamp","performance","now","delta","push","length","shift","min","Infinity","max","sum","i","Math","mean","textContent","round","u","O2","CO2","Menu","close","children","className","to","onClick","species","Species","pallette_data","createElement","Object","values","range","Universe","reset","forEach","id","paint","render","ctx","getContext","readPixels","RGBA","UNSIGNED_BYTE","colors","index","pallette","sizeMap","Index","props","state","submissionMenuOpen","paused","submitting","size","dataURL","currentSubmission","selectedElement","Water","UI","load","React","Component","prevProps","setState","event","preventDefault","confirm","play","pause","toDataURL","snapshot","context","imgData","createImageData","putImageData","cellData","location","hash","replace","fetch","functions","_url","method","headers","then","res","json","storage","refFromURL","getDownloadURL","dlurl","blob","url","URL","createObjectURL","img","Image","src","onload","drawImage","getImageData","cellsData","flush_undos","push_undo","error","console","Fragment","togglePause","pathname","map","v","key","e","setSize","style","padding","borderRadius","join","viewBox","cx","cy","r","pop_undo","fontSize","keys","filter","name","includes","n","setElement","elementID","selected","background","backgroundColor","ElementButton","incScore","score","title","closeMenu","display","placeholder","onChange","target","value","disabled","submit","eventDistance","a","b","sqrt","pow","clientX","clientY","norm","mag","magnitude","scale","s","add","sub","painting","lastPaint","repeat","smoothPaint","clearInterval","setInterval","startEvent","d","addEventListener","body","cancelable","handleTouches","touches","Array","from","boundingRect","getBoundingClientRect","scaleX","ratio","ceil","scaleY","canvasLeft","left","canvasTop","top","x","floor","y","Info","href","BrowseRouter","match","Browse","AdminRouter","Admin","SigninRouter","SignInScreen","ReactDOM","path","component","exact","WebGL","canvasId","gl","textures","mDerivatives","mShaderTextureLOD","fragmentShader","WebGLRenderingContext","getExtension","shader","linkShader","vertexAttribute","getAttribLocation","enableVertexAttribArray","innerHeight","innerWidth","setAttribute","vertexBuffer","createVBO","running","time0","stride","vertexData","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","itemSize","numItems","vertexSource","fragmentSource","program","createProgram","attachShader","compileShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","showLog","uniformLocation","getUniformLocation","shaderType","source","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","type","Date","getTime","compilationLog","getShaderInfoLog","log","channelNumber","createTexture","image","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","err","c","parseInt","concat","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","_start","timePreviousFrame","disable","DEPTH_TEST","viewport","useProgram","gameTime","time","channel","clear","DEPTH_BUFFER_BIT","vertexAttribPointer","FLOAT","activeTexture","TEXTURE0","uniform1i","uniform3f","uniform1f","drawArrays","TRIANGLE_STRIP","h","Glass","Wood","Air","Sand","Zoop","Fish","Bacteria","Seed","Algae","canvasSize","ui","resize","screen_width","canvasStyle","uiStyle","webGL","sky","loadTexture","start","drawPlot","max_readings","total_gas","startPlotter","renderLoop","dayTime","set_time","frame","animWebationId","requestAnimationFrame","module","exports","cachedTextDecoder","TextDecoder","cachegetUint8Memory","getStringFromWasm","ptr","len","decode","wasm","subarray","what","freeze","Plant","Egg","FishTail","Nitrogen","Waste","Stone","brightness","dx","dy","obj","create","prototype","ret","__wrap","__wbg_random_09364f2d8647f133","random","Error","__wbindgen_throw","arg0","arg1","check","safari","history","pushState","onpopstate","go","navigator","userAgent","vendor","opera","test","substr","onbeforeunload"],"mappings":"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","file":"2.af9b03411b6e43088b88.js","sourcesContent":["const reglBuilder = require(\"regl\");\nimport { memory } from \"../crate/pkg/sandtable_bg\";\nwindow.memory = memory;\nimport { Species } from \"../crate/pkg/sandtable\";\nimport { Universe } from \"../crate/pkg\";\n\nlet fsh = require(\"./glsl/sand.glsl\");\nlet vsh = require(\"./glsl/sandVertex.glsl\");\n\nlet startWebGL = ({ canvas, universe, isSnapshot = false }) => {\n  const regl = reglBuilder({\n    canvas,\n    attributes: { preserveDrawingBuffer: isSnapshot }\n  });\n  // const lastFrame = regl.texture();\n  const width = universe.width();\n  const height = universe.height();\n  let cell_pointer = universe.cells();\n  let light_pointer = universe.lights();\n  let cells = new Uint8Array(memory.buffer, cell_pointer, width * height * 4);\n  let lights = new Uint8Array(memory.buffer, light_pointer, width * height * 4);\n  const dataTexture = regl.texture({ width, height, data: cells });\n  const lightTexture = regl.texture({ width, height, data: lights });\n\n  let drawSand = regl({\n    blend: {\n      enable: true,\n      func: {\n        srcRGB: \"src alpha\",\n        srcAlpha: 1,\n        dstRGB: \"one minus src alpha\",\n        dstAlpha: 1\n      },\n      equation: {\n        rgb: \"add\",\n        alpha: \"add\"\n      },\n      color: [0, 0, 0, 0]\n    },\n    frag: fsh,\n    uniforms: {\n      t: ({ tick }) => tick,\n      data: () => {\n        cell_pointer = universe.cells();\n        cells = new Uint8Array(memory.buffer, cell_pointer, width * height * 4);\n\n        return dataTexture({ width, height, data: cells });\n      },\n      light: () => {\n        light_pointer = universe.lights();\n\n        lights = new Uint8Array(\n          memory.buffer,\n          light_pointer,\n          width * height * 4\n        );\n\n        return lightTexture({ width, height, data: lights });\n      },\n      resolution: ({ viewportWidth, viewportHeight }) => [\n        viewportWidth,\n        viewportHeight\n      ],\n      dpi: window.devicePixelRatio * 2,\n      isSnapshot\n      // backBuffer: lastFrame\n    },\n\n    vert: vsh,\n    attributes: {\n      // Full screen triangle\n      position: [[-1, 4], [-1, -1], [4, -1]]\n    },\n    // Our triangle has 3 vertices\n    count: 3\n  });\n\n  return () => {\n    regl.poll();\n    drawSand();\n  };\n};\n\nlet snapshot = universe => {\n  let canvas = document.createElement(\"canvas\");\n  canvas.width = universe.width() / 2;\n  canvas.height = universe.height() / 2;\n  let render = startWebGL({ universe, canvas, isSnapshot: true });\n  render();\n\n  return canvas.toDataURL(\"image/png\");\n};\n\nlet pallette = () => {\n  let canvas = document.createElement(\"canvas\");\n\n  let species = Object.values(Species);\n  let range = Math.max(...species) + 1;\n  let universe = Universe.new(range, 1);\n  canvas.width = range;\n  canvas.height = 3;\n  universe.reset();\n\n  species.forEach(id => universe.paint(id, 0, 2, id));\n\n  let render = startWebGL({ universe, canvas, isSnapshot: true });\n  render();\n  let ctx = canvas.getContext(\"webgl\");\n  let data = new Uint8Array(range * 4);\n  ctx.readPixels(0, 0, range, 1, ctx.RGBA, ctx.UNSIGNED_BYTE, data);\n  let colors = {};\n  species.forEach(id => {\n    let index = id * 4;\n    let color = `rgba(${data[index]},${data[index + 1]}, ${\n      data[index + 2]\n    }, 1.0)`;\n    colors[id] = color;\n  });\n  return colors;\n};\n\nexport { startWebGL, snapshot, pallette };\n","import { universe_O2 } from \"../crate/pkg/sandtable_bg\";\n\nconst reglBuilder = require(\"regl\");\n// import { memory } from \"../crate/pkg/sandtable_bg\";\n// window.memory = memory;\n// import { Species } from \"././crate/pkg/sandtable\";\n// import { Universe } from \"../crate/pkg\";\n\nlet fsh = require(\"./glsl/plot.glsl\");\nlet vsh = require(\"./glsl/sandVertex.glsl\");\n\nlet readingsIndex = 0;\nlet n_readings = 0;\nlet max_readings = 60 * 10;\nlet readings = new Uint8Array(max_readings);\n\nlet startPlotter = ({ canvas, universe }) => {\n  const regl = reglBuilder({\n    canvas\n  });\n  const width = max_readings / 4;\n  const height = 1;\n\n  const dataTexture = regl.texture({\n    width,\n    height,\n    data: readings\n  });\n\n  let drawPlot = regl({\n    blend: {\n      enable: true,\n      func: {\n        srcRGB: \"src alpha\",\n        srcAlpha: 1,\n        dstRGB: \"one minus src alpha\",\n        dstAlpha: 1\n      },\n      equation: {\n        rgb: \"add\",\n        alpha: \"add\"\n      },\n      color: [0, 0, 0, 0]\n    },\n    frag: fsh,\n    uniforms: {\n      t: ({ tick }) => tick,\n      i: () => readingsIndex,\n      n_readings: () => n_readings,\n      max_readings,\n      data: () => {\n        readings[readingsIndex] = (255 * universe.O2()) / universe.total_gas();\n        readingsIndex = (readingsIndex + 1) % max_readings;\n        n_readings = Math.max(readingsIndex, n_readings);\n\n        // console.log(readings);\n        return dataTexture({\n          width,\n          height,\n          data: readings\n        });\n      },\n\n      resolution: ({ viewportWidth, viewportHeight }) => [\n        viewportWidth,\n        viewportHeight\n      ],\n      dpi: window.devicePixelRatio * 2\n    },\n\n    vert: vsh,\n    attributes: {\n      // Full screen triangle\n      position: [[-1, 4], [-1, -1], [4, -1]]\n    },\n    // Our triangle has 3 vertices\n    count: 3\n  });\n\n  return () => {\n    regl.poll();\n    drawPlot();\n  };\n};\n\nexport { startPlotter };\n","const fps = new (class {\n  constructor() {\n    this.fps = document.getElementById(\"fps\");\n    this.frames = [];\n    this.lastFrameTimeStamp = performance.now();\n  }\n\n  render() {\n    // Convert the delta time since the last frame render into a measure\n    // of frames per second.\n    const now = performance.now();\n    const delta = now - this.lastFrameTimeStamp;\n    this.lastFrameTimeStamp = now;\n    const fps = (1 / delta) * 1000;\n\n    // Save only the latest 100 timings.\n    this.frames.push(fps);\n    if (this.frames.length > 30) {\n      this.frames.shift();\n    }\n\n    // Find the max, min, and mean of our 100 latest timings.\n    let min = Infinity;\n    let max = -Infinity;\n    let sum = 0;\n    for (let i = 0; i < this.frames.length; i++) {\n      sum += this.frames[i];\n      min = Math.min(this.frames[i], min);\n      max = Math.max(this.frames[i], max);\n    }\n    let mean = sum / this.frames.length;\n\n    // Render the statistics.\n    this.fps.textContent = `FPS:${Math.round(mean)}\n    O2: ${window.u.O2() / 1000}\n    CO2: ${window.u.CO2() / 1000}`;\n  }\n})();\n\nexport { fps };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Menu = ({ close, children }) => {\n  return (\n    <div className=\"menu-scrim\">\n      <div className={\"menu\"}>\n        {children}\n        <Link to=\"/\" className=\"x\" onClick={close}>\n          <button> x</button>\n        </Link>\n      </div>\n    </div>\n  );\n};\nexport default Menu;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { memory } from \"../../crate/pkg/sandtable_bg\";\nimport { Species } from \"../../crate/pkg/sandtable\";\n\nimport { height, universe, width, reset } from \"../index.js\";\nimport { snapshot, pallette } from \"../render.js\";\n\nimport Menu from \"./menu\";\n\nwindow.species = Species;\nlet pallette_data = pallette();\n\nconst ElementButton = (name, selectedElement, setElement) => {\n  let elementID = Species[name];\n\n  let color = pallette_data[elementID];\n  let selected = elementID == selectedElement;\n\n  let background = \"inherit\";\n\n  return (\n    <button\n      className={selected ? \"selected\" : \"\"}\n      key={name}\n      onClick={() => {\n        setElement(elementID);\n      }}\n      style={{\n        background,\n        backgroundColor: color,\n        filter: selected || `saturate(0.5) `\n      }}\n    >\n      {\"  \"}\n      {name}\n      {\"  \"}\n    </button>\n  );\n};\n\nlet sizeMap = [2, 5, 10];\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      submissionMenuOpen: false,\n      paused: false,\n      submitting: false,\n      size: 1,\n      dataURL: {},\n      currentSubmission: null,\n      selectedElement: Species.Water\n    };\n    window.UI = this;\n\n    this.load();\n  }\n\n  componentDidUpdate(prevProps) {}\n  togglePause() {\n    window.paused = !this.state.paused;\n    this.setState({ paused: !this.state.paused });\n  }\n  play() {\n    window.paused = false;\n    this.setState({ paused: false });\n  }\n  pause() {\n    window.paused = true;\n    this.setState({ paused: true });\n  }\n\n  setSize(event, size) {\n    event.preventDefault();\n    this.setState({\n      size\n    });\n  }\n  reset() {\n    if (window.confirm(\"Reset?\")) {\n      this.play();\n      this.setState({ currentSubmission: null });\n      reset();\n    }\n  }\n  menu() {\n    this.pause();\n    this.setState({ submissionMenuOpen: true });\n  }\n\n  closeMenu() {\n    this.play();\n    this.setState({ submissionMenuOpen: false });\n  }\n  upload() {\n    let dataURL = snapshot(universe);\n    const cells = new Uint8Array(\n      memory.buffer,\n      universe.cells(),\n      width * height * 4\n    );\n\n    // Create canvas\n    let canvas = document.createElement(\"canvas\"),\n      context = canvas.getContext(\"2d\"),\n      imgData = context.createImageData(width, height);\n\n    canvas.height = height;\n    canvas.width = width;\n\n    // fill imgData with data from cells\n    for (var i = 0; i < width * height * 4; i++) {\n      if (i % 4 == 3) {\n        imgData.data[i] = 255;\n      } else {\n        imgData.data[i] = cells[i];\n      }\n    }\n    // put data to context at (0, 0)\n    context.putImageData(imgData, 0, 0);\n\n    let cellData = canvas.toDataURL(\"image/png\");\n\n    this.pause();\n    this.setState({\n      data: { dataURL, cells: cellData },\n      submissionMenuOpen: true\n    });\n  }\n\n  load() {\n    let { location } = this.props;\n    let id = location.hash.replace(/#/, \"\");\n    if (id === \"\") {\n      return;\n    }\n\n    if (this.state.currentSubmission && this.state.currentSubmission.id == id) {\n      return;\n    }\n\n    fetch(functions._url(`api/creations/${id}`), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(data => {\n        storage\n          .refFromURL(\n            `gs://sandtable-8d0f7.appspot.com/creations/${data.id}.data.png`\n          )\n          .getDownloadURL()\n          .then(dlurl => {\n            fetch(dlurl, {\n              method: \"GET\"\n            })\n              .then(res => res.blob())\n              .then(blob => {\n                // console.log(response);\n                this.setState({ currentSubmission: { id, data } });\n\n                var url = URL.createObjectURL(blob);\n                var img = new Image();\n                img.src = url;\n                img.onload = () => {\n                  var canvas = document.createElement(\"canvas\");\n                  canvas.width = width;\n                  canvas.height = height;\n                  var ctx = canvas.getContext(\"2d\");\n                  ctx.drawImage(img, 0, 0);\n                  var imgData = ctx.getImageData(\n                    0,\n                    0,\n                    canvas.width,\n                    canvas.height\n                  );\n\n                  const cellsData = new Uint8Array(\n                    memory.buffer,\n                    universe.cells(),\n                    width * height * 4\n                  );\n\n                  reset();\n\n                  for (var i = 0; i < width * height * 4; i++) {\n                    cellsData[i] = imgData.data[i];\n                  }\n                  universe.flush_undos();\n                  universe.push_undo();\n                  this.pause();\n                };\n              })\n              .catch(error => console.error(\"Error:\", error));\n          });\n      })\n      .catch(error => {\n        console.error(\"Error:\", error);\n      });\n  }\n\n  render() {\n    let { size, paused, selectedElement, currentSubmission } = this.state;\n    let hash =\n      currentSubmission && currentSubmission.id\n        ? `#${currentSubmission.id}`\n        : \"\";\n    return (\n      <React.Fragment>\n        <button\n          onClick={() => this.togglePause()}\n          className={paused ? \"selected\" : \"\"}\n        >\n          {paused ? \"▶\" : \"⏸\"}\n        </button>\n        {/* <button onClick={() => this.upload()}>Upload</button> */}\n\n        <button onClick={() => this.reset()}>Reset</button>\n        <Link\n          to={{\n            pathname: \"/info/\",\n            hash\n          }}\n        >\n          <button>Info</button>\n        </Link>\n\n        {/* {paused && <button onClick={() => universe.tick()}>Tick</button>} */}\n        <span className=\"sizes\">\n          {sizeMap.map((v, i) => (\n            <button\n              key={i}\n              className={i == size ? \"selected\" : \"\"}\n              onClick={e => this.setSize(e, i)}\n              style={{\n                padding: \"0px\",\n                borderRadius: [\n                  [\"25px\", 0, 0, \"25px\"],\n                  [0, 0, 0, 0],\n                  [0, \"25px\", \"25px\", 0]\n                ][i].join(\" \")\n              }}\n            >\n              <svg height=\"23\" width=\"23\" id=\"d\" viewBox=\"0 0 100 100\">\n                <circle cx=\"50\" cy=\"50\" r={2 + v * 3} />\n              </svg>\n            </button>\n          ))}\n        </span>\n        <button\n          onClick={() => {\n            reset();\n            universe.pop_undo();\n          }}\n          style={{ fontSize: 35 }}\n        >\n          ↶\n        </button>\n        {Object.keys(Species)\n          .filter(name => ![\"Plant\", \"FishTail\"].includes(name))\n          .map(n =>\n            ElementButton(n, selectedElement, id =>\n              this.setState({ selectedElement: id })\n            )\n          )}\n\n        {this.state.currentSubmission && (\n          <div className=\"submission-title\">\n            <button onClick={() => this.incScore()}>\n              +♡{this.state.currentSubmission.data.score}{\" \"}\n            </button>\n            {this.state.currentSubmission.data.title}\n          </div>\n        )}\n\n        {this.state.submissionMenuOpen && (\n          <Menu close={() => this.closeMenu()}>\n            <h4>Share your creation with the people!</h4>\n            <img src={this.state.data.dataURL} className=\"submissionImg\" />\n            <div style={{ display: \"flex\" }}>\n              <input\n                placeholder=\"title\"\n                onChange={e => this.setState({ title: e.target.value })}\n              />\n              <button\n                disabled={this.state.submitting}\n                onClick={() => this.submit()}\n              >\n                Submit\n              </button>\n            </div>\n          </Menu>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport { sizeMap, Index };\n","import { height, universe, width, ratio } from \"./index.js\";\nimport { sizeMap } from \"./components/ui\";\nconst canvas = document.getElementById(\"sand-canvas\");\n\nconst eventDistance = (a, b) => {\n  return Math.sqrt(\n    Math.pow(a.clientX - b.clientX, 2) + Math.pow(a.clientY - b.clientY, 2),\n    2\n  );\n};\n\nconst magnitude = a => {\n  return Math.sqrt(Math.pow(a.clientX, 2) + Math.pow(a.clientY, 2), 2);\n};\n\nconst norm = a => {\n  let mag = magnitude(a);\n  return { clientX: a.clientX / mag, clientY: a.clientY / mag };\n};\nconst scale = (a, s) => {\n  return { clientX: a.clientX * s, clientY: a.clientY * s };\n};\nconst add = (a, b) => {\n  return { clientX: a.clientX + b.clientX, clientY: a.clientY + b.clientY };\n};\nconst sub = (a, b) => {\n  return { clientX: a.clientX - b.clientX, clientY: a.clientY - b.clientY };\n};\n\nlet painting = false;\nlet lastPaint = null;\nlet repeat = null;\n\ncanvas.addEventListener(\"mousedown\", event => {\n  event.preventDefault();\n  universe.push_undo();\n  painting = true;\n  clearInterval(repeat);\n  repeat = window.setInterval(() => paint(event), 100);\n  paint(event);\n  lastPaint = event;\n});\n\ndocument.body.addEventListener(\"mouseup\", event => {\n  clearInterval(repeat);\n  if (painting) {\n    event.preventDefault();\n    lastPaint = null;\n    painting = false;\n  }\n});\n\ncanvas.addEventListener(\"mousemove\", event => {\n  clearInterval(repeat);\n  smoothPaint(event);\n});\n\ncanvas.addEventListener(\"mouseleave\", event => {\n  clearInterval(repeat);\n  lastPaint = null;\n});\n\ncanvas.addEventListener(\"touchstart\", event => {\n  universe.push_undo();\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n  painting = true;\n  lastPaint = event;\n  handleTouches(event);\n});\n\ncanvas.addEventListener(\"touchend\", event => {\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n  lastPaint = null;\n  painting = false;\n  clearInterval(repeat);\n});\n\ncanvas.addEventListener(\"touchmove\", event => {\n  if (!window.paused) {\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n  }\n  clearInterval(repeat);\n  handleTouches(event);\n});\n\nfunction smoothPaint(event) {\n  clearInterval(repeat);\n  repeat = window.setInterval(() => paint(event), 100);\n  let startEvent = { clientX: event.clientX, clientY: event.clientY };\n  if (!painting) {\n    return;\n  }\n  let size = sizeMap[window.UI.state.size];\n  let i = 0;\n  paint(startEvent);\n  if (lastPaint) {\n    while (eventDistance(startEvent, lastPaint) > size / 3) {\n      let d = eventDistance(startEvent, lastPaint);\n      startEvent = add(\n        startEvent,\n        scale(norm(sub(lastPaint, event)), Math.min(size / 3, d))\n      );\n      i++;\n      if (i > 1000) {\n        break;\n      }\n      paint(startEvent);\n    }\n  }\n  lastPaint = event;\n}\n\nconst handleTouches = event => {\n  let touches = Array.from(event.touches);\n  if (touches.length == 1) {\n    smoothPaint(touches[0]);\n  } else {\n    touches.forEach(paint);\n  }\n};\n\nconst paint = event => {\n  if (!painting) {\n    return;\n  }\n  const boundingRect = canvas.getBoundingClientRect();\n\n  const scaleX =\n    canvas.width /\n    (ratio * Math.ceil(window.devicePixelRatio)) /\n    boundingRect.width;\n  const scaleY =\n    canvas.height /\n    (ratio * Math.ceil(window.devicePixelRatio)) /\n    boundingRect.height;\n\n  const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\n  const canvasTop = (event.clientY - boundingRect.top) * scaleY;\n\n  const x = Math.min(Math.floor(canvasLeft), width - 1);\n  const y = Math.min(Math.floor(canvasTop), height - 1);\n  if (window.UI.state.selectedElement < 0) return;\n  universe.paint(\n    x,\n    y,\n    sizeMap[window.UI.state.size],\n    window.UI.state.selectedElement\n  );\n};\n","import React from \"react\";\n\nconst Info = () => {\n  return (\n    <div className=\"Info\">\n      <h1>A sealed ecosystem simulation </h1>\n      <p>\n        Created by <a href=\"https://maxbittker.com\">max bittker</a>\n      </p>\n      forked from sandspiel\n    </div>\n  );\n};\n\nexport default Info;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Info from \"./components/info\";\nimport { Index } from \"./components/ui\";\nimport Menu from \"./components/menu\";\n\nfunction BrowseRouter({ match, location }) {\n  return (\n    <Menu>\n      <Browse location={location} />\n    </Menu>\n  );\n}\n\nfunction AdminRouter({ match, location }) {\n  return (\n    <Menu>\n      <Admin location={location} />\n    </Menu>\n  );\n}\n\nfunction SigninRouter({ match, location }) {\n  return (\n    <Menu>\n      <SignInScreen location={location} />\n    </Menu>\n  );\n}\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <Route path=\"/\" component={Index} />\n      <Route\n        exact\n        path=\"/info/\"\n        component={() => (\n          <Menu>\n            <Info />\n          </Menu>\n        )}\n      />\n      <Route path=\"/browse\" component={BrowseRouter} />\n      <Route path=\"/admin\" component={AdminRouter} />\n      <Route path=\"/login\" component={SigninRouter} />\n      <Route path=\"/__/auth/handler\" component={SigninRouter} />\n    </Router>\n  );\n}\n\nReactDOM.render(<AppRouter />, document.getElementById(\"ui\"));\n","let fsh = require(\"./glsl/sky.glsl\");\n\n/*forked from https://github.com/bysse/shadertoy-webgl-harness*/\nclass WebGL {\n  constructor(canvasId, res) {\n    this.canvas = document.getElementById(canvasId);\n    this.gl = this.canvas.getContext(\"webgl\");\n    this.textures = {};\n\n    let vertexShader =\n      \"attribute vec4 aPosition; void main() { gl_Position = aPosition; } \";\n    let fragmentShader = \"\";\n\n    let mIs20 = !(this.gl instanceof WebGLRenderingContext);\n    let mDerivatives;\n    let mShaderTextureLOD;\n    if (mIs20) {\n      mDerivatives = true;\n      mShaderTextureLOD = true;\n    } else {\n      mDerivatives = this.gl.getExtension(\"OES_standard_derivatives\");\n      mShaderTextureLOD = this.gl.getExtension(\"EXT_shader_texture_lod\");\n    }\n    if (mShaderTextureLOD) {\n      fragmentShader += \"#extension GL_EXT_shader_texture_lod : enable\\n\";\n    }\n    if (mDerivatives) {\n      fragmentShader +=\n        \"#ifdef GL_OES_standard_derivatives\\n#extension GL_OES_standard_derivatives : enable\\n#endif\\n\";\n    }\n    fragmentShader += fsh;\n\n    this.shader = WebGL.linkShader(this.gl, vertexShader, fragmentShader);\n    this.shader.vertexAttribute = this.gl.getAttribLocation(\n      this.shader,\n      \"aPosition\"\n    );\n    this.gl.enableVertexAttribArray(this.shader.vertexAttribute);\n\n    this.height = window.innerHeight / res;\n    this.width = window.innerWidth / res;\n    this.canvas.setAttribute(\"width\", this.width);\n    this.canvas.setAttribute(\"height\", this.height);\n\n    this.vertexBuffer = WebGL.createVBO(this.gl, 3, [\n      1.0,\n      1.0,\n      0.0,\n      -1.0,\n      1.0,\n      0.0,\n      1.0,\n      -1.0,\n      0.0,\n      -1.0,\n      -1.0,\n      0.0\n    ]);\n    this.running = false;\n    this.time0 = 0.0;\n  }\n\n  loadTexture(channelNumber, source) {\n    var texture = this.gl.createTexture();\n    var gl = this.gl;\n    texture.image = new Image();\n    texture.image.onload = () => {\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n      try {\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          texture.image\n        );\n      } catch (err) {\n        console.log(`ERROR: Failed to load texture ${source} : ${err}`);\n\n        console.log(`INFO: Generating placeholder texture for ${source}`);\n        var w = 64,\n          bw = 4,\n          data = [];\n        for (var y = 0; y < w; y++) {\n          for (var x = 0; x < w; x++) {\n            var ix = parseInt(x / bw),\n              iy = parseInt(y / bw);\n            var c = 0xff * ((ix + iy) % 2);\n            data = data.concat([c, c, c, 0xff]);\n          }\n        }\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          w,\n          w,\n          0,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          new Uint8Array(data)\n        );\n      }\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n\n      this.textures[channelNumber] = texture;\n    };\n    texture.image.src = source;\n  }\n\n  start() {\n    if (this.running) {\n      return;\n    }\n\n    this._start();\n  }\n\n  _start() {\n    this.running = true;\n    this.time0 = WebGL.getTime();\n    this.timePreviousFrame = this.time0;\n\n    this.gl.disable(this.gl.DEPTH_TEST);\n    this.gl.viewport(0, 0, this.width, this.height);\n    this.gl.useProgram(this.shader);\n  }\n\n  stop() {\n    this.running = false;\n  }\n\n  frame(gameTime) {\n    let gl = this.gl;\n    if (!this.running) {\n      return;\n    }\n\n    let shader = this.shader;\n    let time = WebGL.getTime() - this.time0;\n    let dt = time - this.timePreviousFrame;\n    this.timePreviousFrame = time;\n\n    gl.clear(gl.DEPTH_BUFFER_BIT);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.vertexAttribPointer(\n      shader.vertexAttribute,\n      this.vertexBuffer.itemSize,\n      gl.FLOAT,\n      false,\n      0,\n      0\n    );\n\n    // set texture\n    for (var channel in this.textures) {\n      var texture = this.textures[channel];\n      gl.activeTexture(gl.TEXTURE0 + parseInt(channel));\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.uniform1i(\n        gl.getUniformLocation(shader, \"iChannel\" + channel),\n        channel\n      );\n    }\n\n    // update uniforms\n    gl.uniform3f(\n      gl.getUniformLocation(shader, \"iResolution\"),\n      this.width,\n      this.height,\n      0\n    );\n    gl.uniform1f(gl.getUniformLocation(shader, \"iGlobalTime\"), time); // legacy support\n    gl.uniform1f(gl.getUniformLocation(shader, \"iTime\"), time);\n    gl.uniform1f(gl.getUniformLocation(shader, \"gameTime\"), gameTime);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, this.vertexBuffer.numItems);\n  }\n\n  static createVBO(gl, stride, vertexData) {\n    var vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(vertexData),\n      gl.STATIC_DRAW\n    );\n    vertexBuffer.itemSize = stride;\n    vertexBuffer.numItems = vertexData.length / stride;\n    return vertexBuffer;\n  }\n\n  static linkShader(gl, vertexSource, fragmentSource) {\n    var program = gl.createProgram();\n    gl.attachShader(\n      program,\n      WebGL.compileShader(gl, gl.VERTEX_SHADER, vertexSource)\n    );\n    gl.attachShader(\n      program,\n      WebGL.compileShader(gl, gl.FRAGMENT_SHADER, fragmentSource)\n    );\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      WebGL.showLog(gl, program);\n      throw `Failed to link shader!`;\n    }\n\n    program.uniformLocation = (gl, name) =>\n      gl.getUniformLocation(program, name);\n\n    return program;\n  }\n\n  static compileShader(gl, shaderType, source) {\n    var shader = gl.createShader(shaderType);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      let type =\n        shaderType == gl.VERTEX_SHADER ? \"vertex shader\" : \"fragment shader\";\n      WebGL.showLog(gl, shader);\n      throw `Failed to compile ${type}`;\n    }\n    return shader;\n  }\n\n  static getTime() {\n    return 0.001 * new Date().getTime();\n  }\n  static showLog(gl, shader) {\n    var compilationLog = gl.getShaderInfoLog(shader);\n    console.log(\"ERROR: \" + compilationLog);\n  }\n}\n\nfunction startSky(res) {\n  var webGL = new WebGL(\"sky-canvas\", res);\n  webGL.loadTexture(0, \"assets/noise.png\");\n\n  webGL.start();\n  return webGL;\n}\n\nexport { startSky };\n","import { Universe, Species } from \"../crate/pkg\";\n\nimport { startWebGL } from \"./render\";\nimport { startPlotter } from \"./plot\";\nimport { fps } from \"./fps\";\nimport {} from \"./paint\";\nimport {} from \"./app\";\nimport {} from \"./setup\";\nimport { startSky } from \"./shaderToy\";\n\nlet n = 200;\nlet h = n / 2;\nlet d = n - 6;\n\nconst universe = Universe.new(n, n);\nuniverse.paint(h, h, d + 2, Species.Glass);\n\nuniverse.paint(h - 30, d - 3, 20, Species.Wood);\nuniverse.paint(h + 30, d - 3, 20, Species.Wood);\nuniverse.paint(h, h, d - 2, Species.Air);\nfor (var x = 30; x < d - 30; x += 10) {\n  universe.paint(x, h * 1.2, h, Species.Water);\n}\n\nfor (var x = 0; x < d; x += 10) {\n  universe.paint(x, d * 0.75, 20, Species.Sand);\n}\nuniverse.paint(h, h, h * 1.1, Species.Water);\n\nuniverse.paint(h, h, 2, Species.Zoop);\nuniverse.paint(h + 20, h, 2, Species.Fish);\nuniverse.paint(h, h * 1.2, 2, Species.Bacteria);\nuniverse.paint(h * 1.5, h * 1.2, 2, Species.Seed);\n\nuniverse.paint(h, h, 10, Species.Algae);\n\n// universe.paint(150, 50, 25, Species.Seed);\nlet ratio = 2;\nlet width = n;\nlet height = n;\nconst canvas = document.getElementById(\"sand-canvas\");\n\ncanvas.height = n * ratio * Math.ceil(window.devicePixelRatio);\ncanvas.width = n * ratio * Math.ceil(window.devicePixelRatio);\n\nconst ui = document.getElementById(\"ui\");\nlet canvasSize;\nlet resize = () => {\n  let screen_width = window.innerWidth;\n  let uiheight = 50;\n  let screen_height = window.innerHeight - uiheight;\n\n  let canvasStyle = \"\";\n  let uiStyle = \"\";\n  if (screen_width > screen_height) {\n    if (screen_width - window.innerHeight < 400) {\n      // landscape compressed\n      canvasStyle = `height: ${window.innerHeight}px; margin:3px`;\n      canvasSize = window.innerHeight;\n      uiStyle = `width: ${screen_width -\n        window.innerHeight -\n        12}px; margin: 2px;`;\n    } else {\n      // landscape wide\n      canvasStyle = `height: ${window.innerHeight}px`;\n      canvasSize = window.innerHeight;\n\n      uiStyle = `width: ${(screen_width - window.innerHeight) / 2 -\n        7}px; margin: 2px;`;\n    }\n  } else {\n    //portrait (mobile)\n    canvasSize = screen_width;\n\n    canvasStyle = `width: ${screen_width}px; `;\n    uiStyle = \"\";\n  }\n  ui.style = uiStyle;\n  canvas.style = canvasStyle;\n};\n\nresize();\nwindow.addEventListener(\"deviceorientation\", resize, true);\nwindow.addEventListener(\"resize\", resize);\n\nlet drawSand = startWebGL({ canvas, universe });\nlet sky_ratio = canvasSize / n;\nlet sky = startSky(sky_ratio * 2);\nlet plotcanvas = document.getElementById(\"plot-canvas\");\nlet drawPlot = startPlotter({ canvas: plotcanvas, universe });\n\nlet t = 0;\n\nconst renderLoop = () => {\n  if (!window.paused) {\n    fps.render(); // new\n    universe.tick();\n    t += 1;\n  }\n  let dayTime = t / 50;\n  universe.set_time(dayTime % 255);\n  drawSand();\n  sky.frame(dayTime / 255);\n\n  if (t % 25 == 0) {\n    drawPlot();\n  }\n  window.animWebationId = requestAnimationFrame(renderLoop);\n};\nfunction reset() {\n  universe.reset();\n}\nwindow.u = universe;\nwindow.universe = universe;\nrenderLoop();\n\nexport { canvas, width, height, ratio, universe, reset };\n","module.exports = \"\\n// boring \\\"pass-through\\\" vertex shader\\nprecision mediump float;\\n#define GLSLIFY 1\\nattribute vec2 position;\\nvarying vec2 uv;\\nvoid main() {\\n  uv = position;\\n  gl_Position = vec4(position, 0, 1);\\n}\"","module.exports = \"precision highp float;\\n#define GLSLIFY 1\\nuniform float t;\\nuniform float dpi;\\nuniform vec2 resolution;\\nuniform bool isSnapshot;\\nuniform sampler2D backBuffer;\\nuniform sampler2D data;\\nuniform sampler2D light;\\n\\nvarying vec2 uv;\\n\\n// clang-format off\\nvec3 hsv2rgb_3_0(vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n\\n\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_1_1(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289_1_1(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute_1_2(vec4 x) {\\n     return mod289_1_1(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt_1_3(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise_1_4(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D_1_5 = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g_1_6 = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g_1_6;\\n  vec3 i1 = min( g_1_6.xyz, l.zxy );\\n  vec3 i2 = max( g_1_6.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D_1_5.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289_1_1(i);\\n  vec4 p = permute_1_2( permute_1_2( permute_1_2(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D_1_5.wyz - D_1_5.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1_1_7 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0_1_8 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1_1_7.xy,h.z);\\n  vec3 p3 = vec3(a1_1_7.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt_1_3(vec4(dot(p0_1_8,p0_1_8), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0_1_8 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0_1_8,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\n\\n\\n//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_2_9(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289_2_9(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute_2_10(vec3 x) {\\n  return mod289_2_9(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise_2_11(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289_2_9(i); // Avoid truncation effects in permutation\\n  vec3 p = permute_2_10( permute_2_10( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\n\\n\\nhighp float random_4_12(vec2 co)\\n{\\n    highp float a = 12.9898;\\n    highp float b = 78.233;\\n    highp float c = 43758.5453;\\n    highp float dt= dot(co.xy ,vec2(a,b));\\n    highp float sn= mod(dt,3.14);\\n    return fract(sin(sn) * c);\\n}\\n\\n\\n\\n// clang-format on\\n\\nvoid main() {\\n  vec3 color;\\n  vec2 grid = floor(uv * resolution / dpi);\\n  //   float r = abs(sin(t / 25.));\\n  //   if (length(uv) < r && length(uv) > r - 0.1) {\\n  // color = hsv2rgb(vec3(sin(t * 0.01), 0.5, 0.5));\\n  float noise = snoise_1_4(vec3(grid, t * 0.05));\\n\\n  vec2 textCoord = (uv * vec2(0.5, -0.5)) + vec2(0.5);\\n  vec2 sampleCoord =\\n      (uv * vec2(0.5, -0.5)) + vec2(0.5) + vec2(noise, 0.0) / resolution;\\n  // vec3 bb = texture2D(backBuffer, (uv * 0.5) + vec2(0.5)).rgb;\\n\\n  vec4 data = texture2D(data, textCoord);\\n  float lightValue = texture2D(light, textCoord).r;\\n  float sampleLightValue = texture2D(light, sampleCoord).r;\\n  lightValue = 0.5 * lightValue + 0.5 * sampleLightValue;\\n  int type = int((data.r * 255.) + 0.1);\\n  float energy = data.g;\\n  float age = data.b;\\n\\n  float hue = 0.0;\\n  float saturation = 0.6;\\n  float lightness = 0.3 + energy * 0.5;\\n  float a = 1.0;\\n  float brightness = 0.0;\\n\\n  if (type == 0) { // Air\\n\\n    hue = 0.0;\\n    saturation = 0.1;\\n    lightness = 0.1;\\n    a = 0.0;\\n    if (isSnapshot) {\\n      saturation = 0.05;\\n      lightness = 1.01;\\n      a = 1.0;\\n    }\\n\\n  } else if (type == 1) { // Glass\\n    hue = 0.1;\\n    saturation = 0.1;\\n    lightness = 0.5;\\n  } else if (type == 2) { // Sand\\n    hue =  0.1;\\n    saturation = 0.4 + (age*0.2)  ;\\n    lightness = 1.3 - energy;\\n\\n  } else if (type == 3) { // Water\\n    hue = 0.58;\\n    saturation = 0.6;\\n    lightness = 0.5 + energy * 0.25 + noise * 0.1;\\n    a = 0.4;\\n    if (isSnapshot) {\\n      a = 1.0;\\n    }\\n  } else if (type == 4) { // Algae\\n    hue = 0.4 - age * 0.3;\\n    lightness += 0.0;\\n    saturation = 0.5 - (energy * .2);\\n  } else if (type == 5) { // Plant\\n    hue = 0.4;\\n    lightness -= 0.1;\\n    saturation = 0.4;\\n  } else if (type == 6) { // Zoop\\n    hue = 0.9;\\n    lightness += 0.7;\\n  } else if (type == 7) { // Fish\\n    hue = 0.0;\\n    lightness += 0.4;\\n  } else if (type == 8) { // Bacteria\\n    hue = 0.9;\\n    saturation -= 0.2;\\n    lightness -= 0.1;\\n  } else if (type == 9) { // ???\\n    hue = 0.6;\\n    saturation = 0.4;\\n    lightness = 0.7 + data.g * 0.5;\\n  } else if (type == 10) { // Waste\\n    hue = 0.9;\\n    lightness -= 0.3;\\n    saturation = 0.4;\\n  } else if (type == 11) { // Seed\\n    hue = 0.4;\\n    saturation = 0.4;\\n  } else if (type == 12) { // Stone\\n    hue = -0.4 + (data.g * 0.5);\\n    saturation = 0.1;\\n  } else if (type == 13) { // Wood\\n    hue = (data.g * 0.1);\\n    saturation = 0.3;\\n    lightness = 0.3 + data.g * 0.3;\\n  } else if (type == 14) { // Egg\\n    hue = 0.9;\\n    saturation = age;\\n    lightness = 1.0;\\n  } else if (type == 15) { // Tail\\n    hue += fract(age * 255.*1.2)*0.2;\\n    lightness += 0.4;\\n    // saturation += fract(age * 255.*6.);\\n  }\\n  //  else if (type == 15) { // mite\\n\\n  // } else if (type == 16) { // oil\\n  //   hue = (data.g * 5.0) + t * .008;\\n\\n  //   saturation = 0.2;\\n  //   lightness = 0.3;\\n  // } else if (type == 17) { // Rocket\\n  //   hue = 0.0;\\n  //   saturation = 0.4 + data.b;\\n  //   lightness = 0.9;\\n  // } else if (type == 18) { // fungus\\n  //   hue = (data.g * 0.15) - 0.1;\\n  //   saturation = (data.g * 0.8) - 0.05;\\n\\n  //   // (data.g * 0.00);\\n  //   lightness = 1.5 - (data.g * 0.2);\\n  // } else if (type == 19) { // seed/flower\\n\\n  //   hue = fract(fract(data.b * 2.) * 0.5) - 0.3;\\n  //   saturation = 0.7 * (data.g + 0.4) + data.b * 0.2;\\n  //   lightness = 0.9 * (data.g + 0.9);\\n  // }\\n  if (isSnapshot == false) {\\n    lightness *= (0.975 + snoise_2_11(floor(uv * resolution / dpi)) * 0.025);\\n  }\\n  lightness += lightValue / 2.;\\n  saturation = min(saturation, 1.0);\\n  lightness = min(lightness, 1.0);\\n  color = hsv2rgb_3_0(vec3(hue, saturation, lightness));\\n  gl_FragColor = vec4(color, a);\\n}\"","module.exports = \"precision highp float;\\n#define GLSLIFY 1\\nuniform float t;\\nuniform float i;\\nuniform float max_readings;\\nuniform float n_readings;\\nuniform float dpi;\\nuniform vec2 resolution;\\nuniform sampler2D data;\\n\\nvarying vec2 uv;\\n\\n// clang-format off\\nvec3 hsv2rgb_3_0(vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n\\n\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_1_1(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289_1_1(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute_1_2(vec4 x) {\\n     return mod289_1_1(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt_1_3(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise_1_4(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D_1_5 = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g_1_6 = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g_1_6;\\n  vec3 i1 = min( g_1_6.xyz, l.zxy );\\n  vec3 i2 = max( g_1_6.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D_1_5.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289_1_1(i);\\n  vec4 p = permute_1_2( permute_1_2( permute_1_2(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D_1_5.wyz - D_1_5.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1_1_7 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0_1_8 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1_1_7.xy,h.z);\\n  vec3 p3 = vec3(a1_1_7.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt_1_3(vec4(dot(p0_1_8,p0_1_8), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0_1_8 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0_1_8,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\n\\n\\n//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_2_9(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289_2_9(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute_2_10(vec3 x) {\\n  return mod289_2_9(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise_2_11(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289_2_9(i); // Avoid truncation effects in permutation\\n  vec3 p = permute_2_10( permute_2_10( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\n\\n\\nhighp float random_4_12(vec2 co)\\n{\\n    highp float a = 12.9898;\\n    highp float b = 78.233;\\n    highp float c = 43758.5453;\\n    highp float dt= dot(co.xy ,vec2(a,b));\\n    highp float sn= mod(dt,3.14);\\n    return fract(sin(sn) * c);\\n}\\n\\n\\n\\n// clang-format on\\n\\nvoid main() {\\n  vec3 color;\\n  vec2 grid = floor(uv * resolution / dpi);\\n  vec2 pixel = 1. / resolution;\\n  vec2 pos = (uv + vec2(1.0)) * 0.5;\\n\\n  pos.x = fract(pos.x + i / max_readings);\\n  vec2 textCoord = vec2(pos.x, 0.5);\\n  //   vec2 textCoord = (uv * vec2(0.5, 0)) + vec2(0.5);\\n\\n  vec4 data = texture2D(data, textCoord);\\n  float v = data.x + data.y + data.z + data.w;\\n  float a = 1.0;\\n\\n  //   vec2 pos+= (i*4.)/max_readings;\\n  //   lightness = min(lightness, 1.0);\\n  vec3 green = vec3(0., 1.0, 0.);\\n  gl_FragColor = vec4(0.,0.,0., 0.);\\n\\n  //   if (\\n  if (\\n      pos.x < n_readings /max_readings &&\\n      abs(v / 4. - pos.y) < pixel.y * 1.) {\\n    gl_FragColor = vec4(0.3, 0.8, 0.3, 0.5);\\n\\n  } else {\\n    //     if (abs((i * 4. / max_readings) - pos.x) < pixel.x * 1.) {\\n    //       gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\\n\\n    //     } else {\\n    //     }\\n  }\\n}\"","import * as wasm from './sandtable_bg.wasm';\n\nfunction notDefined(what) { return () => { throw new Error(`${what} is not defined`); }; }\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n/**\n*/\nexport const Species = Object.freeze({ Air:0,Glass:1,Sand:2,Water:3,Algae:4,Plant:5,Zoop:6,Egg:14,Fish:7,FishTail:15,Bacteria:8,Nitrogen:9,Waste:10,Seed:11,Stone:12,Wood:13, });\n/**\n*/\nexport class Cell {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_cell_free(ptr);\n    }\n}\n/**\n*/\nexport class Light {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_light_free(ptr);\n    }\n}\n/**\n*/\nexport class Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_universe_free(ptr);\n    }\n    /**\n    */\n    reset() {\n        wasm.universe_reset(this.ptr);\n    }\n    /**\n    */\n    calculate_light() {\n        wasm.universe_calculate_light(this.ptr);\n    }\n    /**\n    * @param {number} brightness\n    * @param {number} x\n    * @param {number} y\n    * @param {number} dx\n    * @param {number} dy\n    */\n    cast_ray(brightness, x, y, dx, dy) {\n        wasm.universe_cast_ray(this.ptr, brightness, x, y, dx, dy);\n    }\n    /**\n    */\n    tick() {\n        wasm.universe_tick(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        const ret = wasm.universe_width(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        const ret = wasm.universe_height(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    O2() {\n        const ret = wasm.universe_O2(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    total_gas() {\n        const ret = wasm.universe_total_gas(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    CO2() {\n        const ret = wasm.universe_CO2(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    cells() {\n        const ret = wasm.universe_cells(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    lights() {\n        const ret = wasm.universe_lights(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @param {number} size\n    * @param {number} species\n    */\n    paint(x, y, size, species) {\n        wasm.universe_paint(this.ptr, x, y, size, species);\n    }\n    /**\n    */\n    push_undo() {\n        wasm.universe_push_undo(this.ptr);\n    }\n    /**\n    */\n    pop_undo() {\n        wasm.universe_pop_undo(this.ptr);\n    }\n    /**\n    */\n    flush_undos() {\n        wasm.universe_flush_undos(this.ptr);\n    }\n    /**\n    * @param {number} t\n    */\n    set_time(t) {\n        wasm.universe_set_time(this.ptr, t);\n    }\n    /**\n    */\n    inc_time() {\n        wasm.universe_inc_time(this.ptr);\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @returns {Universe}\n    */\n    static new(width, height) {\n        const ret = wasm.universe_new(width, height);\n        return Universe.__wrap(ret);\n    }\n}\n\nexport const __wbg_random_09364f2d8647f133 = typeof Math.random == 'function' ? Math.random : notDefined('Math.random');\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm(arg0, arg1));\n};\n\n","if (window.safari) {\n  history.pushState(null, null, location.href);\n  window.onpopstate = function(event) {\n    history.go(1);\n  };\n}\n\nfunction mobileAndTabletcheck() {\n  var check = false;\n  (function(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    )\n      check = true;\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nif (mobileAndTabletcheck()) {\n  window.onbeforeunload = function() {\n    return true;\n  };\n}\n\ndocument.getElementById(\"background\").addEventListener(\"touchmove\", e => {\n  if (!window.paused) {\n    if (e.cancelable) {\n      e.preventDefault();\n    }\n  }\n});\n\n// if (\"serviceWorker\" in navigator) {\n//   window.addEventListener(\"load\", () => {\n//     navigator.serviceWorker\n//       .register(\"/service-worker.js\")\n//       .then(registration => {\n//         console.log(\"SW registered: \", registration);\n//       })\n//       .catch(registrationError => {\n//         console.log(\"SW registration failed: \", registrationError);\n//       });\n//   });\n// }\n","module.exports = \"\\n// clang-format off\\n\\n\\n#ifdef GL_ES\\nprecision highp float;\\nprecision highp int;\\n#define GLSLIFY 1\\n#endif\\n\\nuniform vec3 iResolution;\\nuniform float iGlobalTime, iTime, gameTime;\\nuniform sampler2D iChannel0;\\n// Appropriated with love & respect from:///\\n// The sun, the sky and the clouds. By StillTravelling\\n// https://www.shadertoy.com/view/tdSXzD\\n// Very much a messy hack sorry!!\\n\\n// Many Thank yous go to the below for their amazing work\\n// Day and night sky cycle. By László Matuska (@BitOfGold)\\n// Creates a sky texture for a skydome\\n// https://www.shadertoy.com/view/ltlSWB\\n\\n// Weather. By David Hoskins, May 2014.\\n// https://www.shadertoy.com/view/4dsXWn\\n\\n// Edge of atmosphere by dmytro rubalskyi (ruba)\\n// https://www.shadertoy.com/view/XlXGzB\\n\\n// Auroras by nimitz\\n// https://www.shadertoy.com/view/XtGGRt\\n\\n// Sorry to those I've missed out!!\\n\\n#define ORIG_CLOUD 0\\n#define ENABLE_RAIN 0 // enable rain drops on screen\\n#define SIMPLE_SUN 1\\n#define NICE_HACK_SUN 1\\n#define SOFT_SUN 1\\n#define cloudy 0.5 // 0.0 clear sky\\n#define haze 0.01 * (cloudy * 20.)\\n#define rainmulti 5.0 // makes clouds thicker\\n#define rainy (10.0 - rainmulti)\\n#define t iTime\\n#define fov tan(radians(60.0))\\n#define S(x, y, z) smoothstep(x, y, z)\\n#define cameraheight 5e1   // 50.\\n#define mincloudheight 5e3 // 5e3\\n#define maxcloudheight 8e3 // 8e3\\n#define xaxiscloud t * 5e2 // t*5e2 +t left -t right *speed\\n#define yaxiscloud 0.      // 0.\\n#define zaxiscloud t * 6e2 // t*6e2 +t away from horizon -t towards horizon *speed\\n#define cloudnoise 2e-4 // 2e-4\\n\\nvec4 texture(     sampler2D   s, vec2 c)                   { return texture2D(s,c); }\\nvec4 texture(     sampler2D   s, vec2 c, float b)          { return texture2D(s,c,b); }\\nvec4 texture(     samplerCube s, vec3 c )                  { return textureCube(s,c); }\\nvec4 texture(     samplerCube s, vec3 c, float b)          { return textureCube(s,c,b); }\\nfloat round( float x ) { return floor(x+0.5); }\\nvec2 round(vec2 x) { return floor(x + 0.5); }\\nvec3 round(vec3 x) { return floor(x + 0.5); }\\nvec4 round(vec4 x) { return floor(x + 0.5); }\\nfloat trunc( float x, float n ) { return floor(x*n)/n; }\\nmat3 transpose(mat3 m) { return mat3(m[0].x, m[1].x, m[2].x, m[0].y, m[1].y, m[2].y, m[0].z, m[1].z, m[2].z); }\\nfloat determinant( in mat2 m ) { return m[0][0]*m[1][1] - m[0][1]*m[1][0]; }\\nfloat determinant( mat4 m ) { float b00 = m[0][0] * m[1][1] - m[0][1] * m[1][0], b01 = m[0][0] * m[1][2] - m[0][2] * m[1][0], b02 = m[0][0] * m[1][3] - m[0][3] * m[1][0], b03 = m[0][1] * m[1][2] - m[0][2] * m[1][1], b04 = m[0][1] * m[1][3] - m[0][3] * m[1][1], b05 = m[0][2] * m[1][3] - m[0][3] * m[1][2], b06 = m[2][0] * m[3][1] - m[2][1] * m[3][0], b07 = m[2][0] * m[3][2] - m[2][2] * m[3][0], b08 = m[2][0] * m[3][3] - m[2][3] * m[3][0], b09 = m[2][1] * m[3][2] - m[2][2] * m[3][1], b10 = m[2][1] * m[3][3] - m[2][3] * m[3][1], b11 = m[2][2] * m[3][3] - m[2][3] * m[3][2];  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;}\\nmat2 inverse(mat2 m) { float det = determinant(m); return mat2(m[1][1], -m[0][1], -m[1][0], m[0][0]) / det; }\\nmat4 inverse(mat4 m ) { float inv0 = m[1].y*m[2].z*m[3].w - m[1].y*m[2].w*m[3].z - m[2].y*m[1].z*m[3].w + m[2].y*m[1].w*m[3].z + m[3].y*m[1].z*m[2].w - m[3].y*m[1].w*m[2].z; float inv4 = -m[1].x*m[2].z*m[3].w + m[1].x*m[2].w*m[3].z + m[2].x*m[1].z*m[3].w - m[2].x*m[1].w*m[3].z - m[3].x*m[1].z*m[2].w + m[3].x*m[1].w*m[2].z; float inv8 = m[1].x*m[2].y*m[3].w - m[1].x*m[2].w*m[3].y - m[2].x  * m[1].y * m[3].w + m[2].x  * m[1].w * m[3].y + m[3].x * m[1].y * m[2].w - m[3].x * m[1].w * m[2].y; float inv12 = -m[1].x  * m[2].y * m[3].z + m[1].x  * m[2].z * m[3].y +m[2].x  * m[1].y * m[3].z - m[2].x  * m[1].z * m[3].y - m[3].x * m[1].y * m[2].z + m[3].x * m[1].z * m[2].y; float inv1 = -m[0].y*m[2].z * m[3].w + m[0].y*m[2].w * m[3].z + m[2].y  * m[0].z * m[3].w - m[2].y  * m[0].w * m[3].z - m[3].y * m[0].z * m[2].w + m[3].y * m[0].w * m[2].z; float inv5 = m[0].x  * m[2].z * m[3].w - m[0].x  * m[2].w * m[3].z - m[2].x  * m[0].z * m[3].w + m[2].x  * m[0].w * m[3].z + m[3].x * m[0].z * m[2].w - m[3].x * m[0].w * m[2].z; float inv9 = -m[0].x  * m[2].y * m[3].w +  m[0].x  * m[2].w * m[3].y + m[2].x  * m[0].y * m[3].w - m[2].x  * m[0].w * m[3].y - m[3].x * m[0].y * m[2].w + m[3].x * m[0].w * m[2].y; float inv13 = m[0].x  * m[2].y * m[3].z - m[0].x  * m[2].z * m[3].y - m[2].x  * m[0].y * m[3].z + m[2].x  * m[0].z * m[3].y + m[3].x * m[0].y * m[2].z - m[3].x * m[0].z * m[2].y; float inv2 = m[0].y  * m[1].z * m[3].w - m[0].y  * m[1].w * m[3].z - m[1].y  * m[0].z * m[3].w + m[1].y  * m[0].w * m[3].z + m[3].y * m[0].z * m[1].w - m[3].y * m[0].w * m[1].z; float inv6 = -m[0].x  * m[1].z * m[3].w + m[0].x  * m[1].w * m[3].z + m[1].x  * m[0].z * m[3].w - m[1].x  * m[0].w * m[3].z - m[3].x * m[0].z * m[1].w + m[3].x * m[0].w * m[1].z; float inv10 = m[0].x  * m[1].y * m[3].w - m[0].x  * m[1].w * m[3].y - m[1].x  * m[0].y * m[3].w + m[1].x  * m[0].w * m[3].y + m[3].x * m[0].y * m[1].w - m[3].x * m[0].w * m[1].y; float inv14 = -m[0].x  * m[1].y * m[3].z + m[0].x  * m[1].z * m[3].y + m[1].x  * m[0].y * m[3].z - m[1].x  * m[0].z * m[3].y - m[3].x * m[0].y * m[1].z + m[3].x * m[0].z * m[1].y; float inv3 = -m[0].y * m[1].z * m[2].w + m[0].y * m[1].w * m[2].z + m[1].y * m[0].z * m[2].w - m[1].y * m[0].w * m[2].z - m[2].y * m[0].z * m[1].w + m[2].y * m[0].w * m[1].z; float inv7 = m[0].x * m[1].z * m[2].w - m[0].x * m[1].w * m[2].z - m[1].x * m[0].z * m[2].w + m[1].x * m[0].w * m[2].z + m[2].x * m[0].z * m[1].w - m[2].x * m[0].w * m[1].z; float inv11 = -m[0].x * m[1].y * m[2].w + m[0].x * m[1].w * m[2].y + m[1].x * m[0].y * m[2].w - m[1].x * m[0].w * m[2].y - m[2].x * m[0].y * m[1].w + m[2].x * m[0].w * m[1].y; float inv15 = m[0].x * m[1].y * m[2].z - m[0].x * m[1].z * m[2].y - m[1].x * m[0].y * m[2].z + m[1].x * m[0].z * m[2].y + m[2].x * m[0].y * m[1].z - m[2].x * m[0].z * m[1].y; float det = m[0].x * inv0 + m[0].y * inv4 + m[0].z * inv8 + m[0].w * inv12; det = 1.0 / det; return det*mat4( inv0, inv1, inv2, inv3,inv4, inv5, inv6, inv7,inv8, inv9, inv10, inv11,inv12, inv13, inv14, inv15);}\\nfloat sinh(float x)  { return (exp(x)-exp(-x))/2.; }\\nfloat cosh(float x)  { return (exp(x)+exp(-x))/2.; }\\nfloat tanh(float x)  { return sinh(x)/cosh(x); }\\nfloat coth(float x)  { return cosh(x)/sinh(x); }\\nfloat sech(float x)  { return 1./cosh(x); }\\nfloat csch(float x)  { return 1./sinh(x); }\\nfloat asinh(float x) { return    log(x+sqrt(x*x+1.)); }\\nfloat acosh(float x) { return    log(x+sqrt(x*x-1.)); }\\nfloat atanh(float x) { return .5*log((1.+x)/(1.-x)); }\\nfloat acoth(float x) { return .5*log((x+1.)/(x-1.)); }\\nfloat asech(float x) { return    log((1.+sqrt(1.-x*x))/x); }\\nfloat acsch(float x) { return    log((1.+sqrt(1.+x*x))/x); }\\nvec4 textureLod(  sampler2D   s, vec2 c, float b)          { return texture2DLodEXT(s,c,b); }\\nvec4 textureGrad( sampler2D   s, vec2 c, vec2 dx, vec2 dy) { return texture2DGradEXT(s,c,dx,dy); }\\n// clang-format on\\n\\n//#define cloud2\\n\\n// Performance\\nconst int steps = 16;  // 16 is fast, 128 or 256 is extreme high\\nconst int stepss = 16; // 16 is fast, 16 or 32 is high\\n\\n// Environment\\nconst float R0 = 6360e3; // planet radius //6360e3 actual 6371km\\nconst float Ra = 6380e3; // atmosphere radius //6380e3 troposphere 8 to 14.5km\\nconst float I = 10.;     // sun light power, 10.0 is normal\\nconst float SI = 5.;     // sun intensity for sun\\nconst float g = 0.45;    // light concentration .76 //.45 //.6  .45 is normaL\\nconst float g2 = g * g;\\nconst float PI = 3.14159265358979323846;\\nconst float PI2 = 2. * 3.14159265358979323846;\\n\\nconst float ts = (cameraheight / 2.5e5);\\n\\nconst float s = 0.999; // light concentration for sun\\n#if SOFT_SUN\\nconst float s2 = s;\\n#else\\nconst float s2 = s * s;\\n#endif\\nconst float Hr = 8e3;   // Rayleigh scattering top //8e3\\nconst float Hm = 1.2e3; // Mie scattering top //1.3e3\\n\\nvec3 bM = vec3(21e-6); // normal mie // vec3(21e-6)\\n// vec3 bM = vec3(50e-6); //high mie\\n\\n// Rayleigh scattering (sky color, atmospheric up to 8km)\\nvec3 bR = vec3(5.8e-6, 13.5e-6, 33.1e-6); // normal earth\\n// vec3 bR = vec3(5.8e-6, 33.1e-6, 13.5e-6); //purple\\n// vec3 bR = vec3( 63.5e-6, 13.1e-6, 50.8e-6 ); //green\\n// vec3 bR = vec3( 13.5e-6, 23.1e-6, 115.8e-6 ); //yellow\\n// vec3 bR = vec3( 5.5e-6, 15.1e-6, 355.8e-6 ); //yeellow\\n// vec3 bR = vec3(3.5e-6, 333.1e-6, 235.8e-6 ); //red-purple\\n\\nvec3 C = vec3(0., -R0, 0.);             // planet center\\nvec3 Ds = normalize(vec3(0., 0., -1.)); // sun direction?\\n\\nfloat cloudyhigh = 0.05; // if cloud2 defined\\n\\n#if ORIG_CLOUD\\nfloat cloudnear =\\n    1.0; // 9e3 12e3  //do not render too close clouds on the zenith\\nfloat cloudfar = 1e3; // 15e3 17e3\\n#else\\nfloat cloudnear = 1.0; // 15e3 17e3\\nfloat cloudfar = 70e3; // 160e3  //do not render too close clouds on the horizon\\n                       // 160km should be max for cumulus\\n#endif\\n\\n// AURORA STUFF\\nmat2 mm2(in float a) {\\n  float c = cos(a);\\n  float s = sin(a);\\n  return mat2(c, s, -s, c);\\n}\\n\\nmat2 m2 = mat2(0.95534, 0.29552, -0.29552, 0.95534);\\n\\nfloat tri(in float x) { return clamp(abs(fract(x) - .5), 0.01, 0.49); }\\n\\nvec2 tri2(in vec2 p) { return vec2(tri(p.x) + tri(p.y), tri(p.y + tri(p.x))); }\\n\\nfloat triNoise2d(in vec2 p, float spd) {\\n  float z = 1.8;\\n  float z2 = 2.5;\\n  float rz = 0.;\\n  p *= mm2(p.x * 0.06);\\n  vec2 bp = p;\\n  for (float i = 0.; i < 5.; i++) {\\n    vec2 dg = tri2(bp * 1.85) * .75;\\n    dg *= mm2(t * spd);\\n    p -= dg / z2;\\n\\n    bp *= 1.3;\\n    z2 *= 1.45;\\n    z *= .42;\\n    p *= 1.21 + (rz - 1.0) * .02;\\n\\n    rz += tri(p.x + tri(p.y)) * z;\\n    p *= -m2;\\n  }\\n  return clamp(1. / pow(rz * 29., 1.3), 0., .55);\\n}\\n\\nfloat hash21(in vec2 n) {\\n  return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\\n}\\nvec4 aurora(vec3 ro, vec3 rd) {\\n  vec4 col = vec4(0);\\n  vec4 avgCol = vec4(0);\\n  ro *= 1e-5;\\n  float mt = 10.;\\n  for (float i = 0.; i < 5.; i++) {\\n    float of = 0.006 * hash21(gl_FragCoord.xy) * smoothstep(0., 15., i * mt);\\n    float pt = ((.8 + pow((i * mt), 1.2) * .001) - rd.y) / (rd.y * 2. + 0.4);\\n    pt -= of;\\n    vec3 bpos = (ro) + pt * rd;\\n    vec2 p = bpos.zx;\\n    // vec2 p = rd.zx;\\n    float rzt = triNoise2d(p, 0.1);\\n    vec4 col2 = vec4(0, 0, 0, rzt);\\n    col2.rgb =\\n        (sin(1. - vec3(2.15, -.5, 1.2) + (i * mt) * 0.053) * (0.5 * mt)) * rzt;\\n    avgCol = mix(avgCol, col2, .5);\\n    col += avgCol * exp2((-i * mt) * 0.04 - 2.5) * smoothstep(0., 5., i * mt);\\n  }\\n\\n  col *= (clamp(rd.y * 15. + .4, 0., 1.2));\\n  return col * 2.8;\\n}\\n\\n// END AURORA STUFF\\n\\nfloat noise(in vec2 v) {\\n  return 0.5;\\n  //    texture(iChannel0,(v+.5)/256., 0.).r * 0.01;\\n}\\n\\n// by iq\\nfloat Noise(in vec3 x) {\\n  vec3 p = floor(x);\\n  vec3 f = fract(x);\\n  f = f * f * (3.0 - 2.0 * f);\\n\\n  vec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\\n  vec2 rg = textureLod(iChannel0, (uv + 0.5) / 256.0, -100.0).yx;\\n  return mix(rg.x, rg.y, f.z);\\n}\\n\\nfloat fnoise(vec3 p, in float t) {\\n  p *= .25;\\n  float f;\\n\\n  f = 0.5000 * Noise(p);\\n  p = p * 3.02;\\n  p.y -= t * .1; // t*.05 speed cloud changes\\n  f += 0.2500 * Noise(p);\\n  p = p * 3.03;\\n  p.y += t * .06;\\n  f += 0.1250 * Noise(p);\\n  p = p * 3.01;\\n  f += 0.0625 * Noise(p);\\n  p = p * 3.03;\\n  f += 0.03125 * Noise(p);\\n  p = p * 3.02;\\n  f += 0.015625 * Noise(p);\\n  return f;\\n}\\n\\nfloat cloud(vec3 p, in float t) {\\n  float cld = fnoise(p * cloudnoise, t) + cloudy * 0.1;\\n  cld = smoothstep(.4 + .04, .6 + .04, cld);\\n  cld *= cld * (5.0 * rainmulti);\\n  return cld + haze;\\n}\\n\\nvoid densities(in vec3 pos, out float rayleigh, out float mie) {\\n  float h = length(pos - C) - R0;\\n  rayleigh = exp(-h / Hr);\\n  vec3 d = pos;\\n  d.y = 0.0;\\n  float dist = length(d);\\n\\n  float cld = 0.;\\n  if (mincloudheight < h && h < maxcloudheight) {\\n    // cld = cloud(pos+vec3(t*1e3,0., t*1e3),t)*cloudy;\\n    cld = cloud(pos + vec3(xaxiscloud, yaxiscloud, zaxiscloud), t) *\\n          cloudy; // direction and speed the cloud movers\\n    cld *= sin(3.1415 * (h - mincloudheight) / mincloudheight) * cloudy;\\n  }\\n#ifdef cloud2\\n  float cld2 = 0.;\\n  if (12e3 < h && h < 15.5e3) {\\n    cld2 = fnoise(pos * 3e-4, t) *\\n           cloud(pos * 32.0 + vec3(27612.3, 0., -t * 15e3), t);\\n    cld2 *= sin(3.1413 * (h - 12e3) / 12e3) * cloudyhigh;\\n    cld2 = clamp(cld2, 0.0, 1.0);\\n  }\\n\\n#endif\\n\\n#if ORIG_CLOUD\\n  if (dist < cloudfar) {\\n    float factor =\\n        clamp(1.0 - ((cloudfar - dist) / (cloudfar - cloudnear)), 0.0, 1.0);\\n    cld *= factor;\\n  }\\n#else\\n\\n  if (dist > cloudfar) {\\n\\n    float factor =\\n        clamp(1.0 - ((dist - cloudfar) / (cloudfar - cloudnear)), 0.0, 1.0);\\n    cld *= factor;\\n  }\\n#endif\\n\\n  mie = exp(-h / Hm) + cld + haze;\\n#ifdef cloud2\\n  mie += cld2;\\n#endif\\n}\\n\\nfloat escape(in vec3 p, in vec3 d, in float R) {\\n  vec3 v = p - C;\\n  float b = dot(v, d);\\n  float c = dot(v, v) - R * R;\\n  float det2 = b * b - c;\\n  if (det2 < 0.)\\n    return -1.;\\n  float det = sqrt(det2);\\n  float t1 = -b - det, t2 = -b + det;\\n  return (t1 >= 0.) ? t1 : t2;\\n}\\n\\n// this can be explained:\\n// http://www.scratchapixel.com/lessons/3d-advanced-lessons/simulating-the-colors-of-the-sky/atmospheric-scattering/\\nvoid scatter(vec3 o, vec3 d, out vec3 col, out vec3 scat, in float t) {\\n\\n  float L = escape(o, d, Ra);\\n  float mu = dot(d, Ds);\\n  float opmu2 = 1. + mu * mu;\\n  float phaseR = .0596831 * opmu2;\\n  float phaseM = .1193662 * (1. - g2) * opmu2 /\\n                 ((2. + g2) * pow(1. + g2 - 2. * g * mu, 1.5));\\n  float phaseS = .1193662 * (1. - s2) * opmu2 /\\n                 ((2. + s2) * pow(1. + s2 - 2. * s * mu, 1.5));\\n\\n  float depthR = 0., depthM = 0.;\\n  vec3 R = vec3(0.), M = vec3(0.);\\n\\n  float dl = L / float(steps);\\n  for (int i = 0; i < steps; ++i) {\\n    float l = float(i) * dl;\\n    vec3 p = (o + d * l);\\n\\n    float dR, dM;\\n    densities(p, dR, dM);\\n    dR *= dl;\\n    dM *= dl;\\n    depthR += dR;\\n    depthM += dM;\\n\\n    float Ls = escape(p, Ds, Ra);\\n    if (Ls > 0.) {\\n      float dls = Ls / float(stepss);\\n      float depthRs = 0., depthMs = 0.;\\n      for (int j = 0; j < stepss; ++j) {\\n        float ls = float(j) * dls;\\n        vec3 ps = (p + Ds * ls);\\n        float dRs, dMs;\\n        densities(ps, dRs, dMs);\\n        depthRs += dRs * dls;\\n        depthMs += dMs * dls;\\n      }\\n\\n      vec3 A = exp(-(bR * (depthRs + depthR) + bM * (depthMs + depthM)));\\n      R += (A * dR);\\n      M += A * dM;\\n    } else {\\n    }\\n  }\\n\\n  // col = (I) * (R * bR * phaseR + M * bM * (phaseM ));\\n  col = (I) * (M * bM * (phaseM)); // Mie scattering\\n#if NICE_HACK_SUN\\n  col += (SI) * (M * bM * phaseS); // Sun\\n#endif\\n  col += (I) * (R * bR * phaseR); // Rayleigh scattering\\n  scat = 0.1 * (bM * depthM);\\n  // scat = 0.0 + clamp(depthM*5e-7,0.,1.);\\n}\\n\\nvec3 hash33(vec3 p) {\\n  p = fract(p * vec3(443.8975, 397.2973, 491.1871));\\n  p += dot(p.zxy, p.yxz + 19.27);\\n  return fract(vec3(p.x * p.y, p.z * p.x, p.y * p.z));\\n}\\n\\nvec3 stars(in vec3 p) {\\n  vec3 c = vec3(0.);\\n  float res = iResolution.x * 2.5;\\n\\n  for (float i = 0.; i < 4.; i++) {\\n    vec3 q = fract(p * (.15 * res)) - 0.5;\\n    vec3 id = floor(p * (.15 * res));\\n    vec2 rn = hash33(id).xy;\\n    float c2 = 1. - smoothstep(0., .6, length(q));\\n    c2 *= step(rn.x, .0005 + i * i * 0.001);\\n    c +=\\n        c2 * (mix(vec3(1.0, 0.49, 0.1), vec3(0.75, 0.9, 1.), rn.y) * 0.1 + 0.9);\\n    p *= 1.3;\\n  }\\n  return c * c * .8;\\n}\\n\\n// SIMPLE SUN STUFF\\nconst float density = 0.5;\\nconst float zenithOffset = 0.48;\\nconst vec3 skyColor = vec3(0.37, 0.55, 1.0) * (1.0 + 0.0);\\n\\n#define zenithDensity(x) density / pow(max(x - zenithOffset, 0.0035), 0.75)\\n\\nfloat getSunPoint(vec2 p, vec2 lp) {\\n  return smoothstep(0.04 * (fov / 2.0), 0.026 * (fov / 2.0), distance(p, lp)) *\\n         50.0;\\n}\\n\\nfloat getMie(vec2 p, vec2 lp) {\\n  float mytest = lp.y < 0.5 ? (lp.y + 0.5) * pow(0.05, 20.0) : 0.05;\\n  float disk = clamp(1.0 - pow(distance(p, lp), mytest), 0.0, 1.0);\\n  return disk * disk * (3.0 - 2.0 * disk) * 0.25 * PI;\\n}\\n\\nvec3 getSkyAbsorption(vec3 x, float y) {\\n  vec3 absorption = x * y;\\n  absorption = pow(absorption, 1.0 - (y + absorption) * 0.5) / x / y;\\n  return absorption;\\n}\\n\\nvec3 jodieReinhardTonemap(vec3 c) {\\n  float l = dot(c, vec3(0.2126, 0.7152, 0.0722));\\n  vec3 tc = c / (c + 1.0);\\n  return mix(c / (l + 1.0), tc, tc);\\n}\\n\\nvec3 getAtmosphericScattering(vec2 p, vec2 lp) {\\n  float zenithnew = zenithDensity(p.y);\\n  float sunPointDistMult =\\n      clamp(length(max(lp.y + 0.1 - zenithOffset, 0.0)), 0.0, 1.0);\\n  vec3 absorption = getSkyAbsorption(skyColor, zenithnew);\\n  vec3 sunAbsorption = getSkyAbsorption(skyColor, zenithDensity(lp.y + 0.1));\\n  vec3 sun3 = getSunPoint(p, lp) * absorption;\\n  vec3 mie2 = getMie(p, lp) * sunAbsorption;\\n  vec3 totalSky = sun3; //+ mie2;\\n  totalSky *= sunAbsorption * 0.5 + 0.5 * length(sunAbsorption);\\n  vec3 newSky = jodieReinhardTonemap(totalSky);\\n  return newSky;\\n}\\n// END SIMPLE SUN STUFF\\n\\n// RAIN STUFF\\nvec3 N31(float p) {\\n  //  3 out, 1 in... DAVE HOSKINS\\n  vec3 p3 = fract(vec3(p) * vec3(.1031, .11369, .13787));\\n  p3 += dot(p3, p3.yzx + 19.19);\\n  return fract(\\n      vec3((p3.x + p3.y) * p3.z, (p3.x + p3.z) * p3.y, (p3.y + p3.z) * p3.x));\\n}\\n\\nfloat SawTooth(float t) {\\n  return cos(t + cos(t)) + sin(2. * t) * .2 + sin(4. * t) * .02;\\n}\\n\\nfloat DeltaSawTooth(float t) {\\n  return 0.4 * cos(2. * t) + 0.08 * cos(4. * t) -\\n         (1. - sin(t)) * sin(t + cos(t));\\n}\\n\\nvec2 GetDrops(vec2 uv, float seed, float m) {\\n\\n  float t2 = t + m;\\n  vec2 o = vec2(0.);\\n\\n#ifndef DROP_DEBUG\\n  uv.y += t2 * .05;\\n#endif\\n\\n  uv *= vec2(10., 2.5) * 2.;\\n  vec2 id = floor(uv);\\n  vec3 n = N31(id.x + (id.y + seed) * 546.3524);\\n  vec2 bd = fract(uv);\\n\\n  vec2 uv2 = bd;\\n\\n  bd -= 0.5;\\n\\n  bd.y *= 4.;\\n\\n  bd.x += (n.x - .5) * rainy;\\n\\n  t2 += n.z * 6.28;\\n  float slide = SawTooth(t2);\\n\\n  float ts = 1.5;\\n  vec2 trailPos = vec2(bd.x * ts, (fract(bd.y * ts * 2. - t2 * 2.) - .5) * .5);\\n\\n  bd.y += slide * 2.; // make drops slide down\\n\\n#ifdef HIGH_QUALITY\\n  float dropShape = bd.x * bd.x;\\n  dropShape *= DeltaSawTooth(t);\\n  bd.y += dropShape; // change shape of drop when it is falling\\n#endif\\n\\n  float d = length(bd); // distance to main drop\\n\\n  float trailMask = S(-.2, .2, bd.y); // mask out drops that are below the main\\n  trailMask *= bd.y;                  // fade dropsize\\n  float td = length(trailPos * max(.5, trailMask)); // distance to trail drops\\n\\n  float mainDrop = S(.2, .1, d);\\n  float dropTrail = S(.1, .02, td);\\n\\n  dropTrail *= trailMask;\\n  o = mix(bd * mainDrop, trailPos, dropTrail); // mix main drop and drop trail\\n\\n#ifdef DROP_DEBUG\\n  if (uv2.x < .02 || uv2.y < .01)\\n    o = vec2(1.);\\n#endif\\n\\n  return o;\\n}\\n// END RAIN STUFF\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\\n\\n  float AR = iResolution.x / iResolution.y;\\n//   float YAR = iResolution.y / iResolution.x;\\n//   float SAR = min(AR, YAR);\\n//   float BAR = max(AR, YAR);\\n//   float smallSide = min(iResolution.x, iResolution.y);\\n//   float bigSide = max(iResolution.x, iResolution.y);\\n  float M = 1.0; // canvas.innerWidth/M //canvas.innerHeight/M --res\\n  vec2 sunPos = vec2(sin(-gameTime * PI2), cos(gameTime * PI2)) *0.5;\\n  sunPos.x += AR * 0.5;\\n  sunPos.y += 0.5;\\n  // circle = vec2(sin(gameTime*PI2));\\n  vec2 uvMouse = sunPos;\\n  // / iResolution.xy);\\n  // uvMouse.x *= AR;\\n\\n  vec2 uv0 = (fragCoord.xy / iResolution.xy);\\n  uv0 *= M;\\n  // uv0.x *= AR;\\n\\n  vec2 uv = uv0 * (2.0 * M) - (1.0 * M);\\n  uv.x *= AR;\\n\\n  // uvMouse.y=(0.7-(0.05*fov)); //initial view\\n  // uvMouse.x=(1.0-(0.05*fov)); //initial view\\n  // circle+=0.5;\\n  // uvMouse.xy = circle - vec2((0.05*fov));\\n  // uvMouse.xy = vec2(1.0, 0.5);\\n  // uvMouse*= 100.;\\n  // uvMouse += iResolution.xy *0.5;\\n  Ds = normalize(vec3(uvMouse.x - ((0.5 * AR)), uvMouse.y - 0.5, (fov / -2.0)));\\n\\n  vec3 O = vec3(0., cameraheight, 0.);\\n  vec3 D = normalize(vec3(uv, -(fov * M)));\\n\\n  vec3 color = vec3(0.);\\n  vec3 scat = vec3(0.);\\n\\n  // float scat = 0.;\\n  float att = 1.;\\n  float staratt = 1.;\\n  float scatatt = 1.;\\n  vec3 star = vec3(0.);\\n  vec4 aur = vec4(0.);\\n\\n  float fade = smoothstep(0., 0.01, abs(D.y)) * 0.5 + 0.9;\\n\\n  staratt = 1. - min(1.0, (uvMouse.y * 2.0));\\n  scatatt = 1. - min(1.0, (uvMouse.y * 2.2));\\n\\n  if (D.y < -ts) {\\n    float L = -O.y / D.y;\\n    O = O + D * L;\\n    D.y = -D.y;\\n    D = normalize(\\n        D +\\n        vec3(0, .003 * sin(t + 6.2831 * noise(O.xz + vec2(0., -t * 1e3))), 0.));\\n    att = .6;\\n    star = stars(D);\\n    uvMouse.y < 0.5 ? aur = smoothstep(0.0, 2.5, aurora(O, D)) : aur = aur;\\n  } else {\\n    float L1 = O.y / D.y;\\n    vec3 O1 = O + D * L1;\\n\\n    vec3 D1 = vec3(1.);\\n    D1 = normalize(\\n        D + vec3(1.,\\n                 0.0009 * sin(t + 6.2831 * noise(O1.xz + vec2(0., t * 0.8))),\\n                 0.));\\n    star = stars(D1);\\n    uvMouse.y < 0.5 ? aur = smoothstep(0., 1.5, aurora(O, D)) *fade : aur = aur;\\n  }\\n\\n  star *= att;\\n  star *= staratt;\\n\\n  scatter(O, D, color, scat, t);\\n  color *= att;\\n  scat *= att;\\n  scat *= scatatt;\\n\\n// draw the badly implemented sun\\n#if SIMPLE_SUN\\n\\n  vec2 uv1 = (fragCoord.xy / iResolution.xy);\\n  uv1 *= M;\\n  uv1.x *= AR;\\n\\n  vec3 sun2 = getAtmosphericScattering(uv1, vec2(uvMouse.x, uvMouse.y));\\n  color += sun2;\\n#endif\\n\\n  color += scat;\\n  color += star;\\n  //   color=color*(1.-(aur.a)*scatatt) + (aur.rgb*scatatt);\\n  color += aur.rgb * scatatt;\\n\\n#if ENABLE_RAIN\\n  vec2 drops = vec2(0.);\\n  if (rainmulti > 1.0) {\\n    drops = GetDrops(uv / 2.0, 1., 1.);\\n\\n    color += drops.x + drops.y;\\n  }\\n#endif\\n\\n  // float env = pow( smoothstep(.5, iResolution.x / iResolution.y,\\n  // length(uv*0.8)), 0.0);\\n  fragColor = vec4(pow(color, vec3(1.0 / 2.2)), 1.); // gamma correct\\n}\\nvoid main() {\\n  vec4 color = vec4(0.0);\\n  mainImage(color, gl_FragCoord.xy);\\n  gl_FragColor = color;\\n}\\n\""],"sourceRoot":""}