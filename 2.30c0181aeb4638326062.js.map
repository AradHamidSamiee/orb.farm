{"version":3,"sources":["webpack:///./js/render.js","webpack:///./js/plot.js","webpack:///./js/fps.js","webpack:///./js/components/menu.js","webpack:///./js/components/ui.js","webpack:///./js/paint.js","webpack:///./js/components/info.js","webpack:///./js/app.js","webpack:///./js/shaderToy.js","webpack:///./js/index.js","webpack:///./js/glsl/sandVertex.glsl","webpack:///./js/glsl/sand.glsl","webpack:///./js/glsl/plot.glsl","webpack:///./crate/pkg/sandtable.js","webpack:///./js/setup.js","webpack:///./js/glsl/sky.glsl"],"names":["reglBuilder","require","window","memory","fsh","vsh","startWebGL","canvas","universe","isSnapshot","regl","attributes","preserveDrawingBuffer","width","height","cell_pointer","cells","light_pointer","lights","Uint8Array","buffer","dataTexture","texture","data","lightTexture","drawSand","blend","enable","func","srcRGB","srcAlpha","dstRGB","dstAlpha","equation","rgb","alpha","color","frag","uniforms","t","tick","resolution","viewportWidth","viewportHeight","dpi","vert","position","count","poll","label","document","getElementById","readingsIndex","n_readings","readings","throttle","fps","this","frames","lastFrameTimeStamp","performance","now","delta","push","length","shift","min","Infinity","max","sum","i","Math","mean","textContent","round","Menu","close","children","className","to","onClick","skiplist","species","Species","pallette_data","createElement","Object","values","range","Universe","reset","forEach","id","paint","Air","render","ctx","getContext","readPixels","RGBA","UNSIGNED_BYTE","colors","index","pallette","randomRadius","random","organicRadius","OrganicButton","style","borderRadius","sizeMap","Index","props","state","submissionMenuOpen","paused","ff","submitting","size","dataURL","currentSubmission","selectedElement","Sand","UI","prevProps","setState","event","preventDefault","confirm","play","pause","console","log","context","imgData","createImageData","putImageData","cellData","toDataURL","dataString","JSON","stringify","localStorage","setItem","o2","parse","getItem","setInterval","upload","parseInt","set_o2","img","Image","src","onload","drawImage","getImageData","cellsData","hash","Fragment","togglePause","viewBox","points","toggleFF","pathname","pop_undo","fontSize","keys","filter","name","includes","map","n","setElement","elementID","selected","key","background","backgroundColor","ElementButton","incScore","score","title","closeMenu","display","placeholder","onChange","e","target","value","disabled","submit","React","Component","eventDistance","a","b","sqrt","pow","clientX","clientY","norm","mag","magnitude","scale","s","add","sub","painting","lastPaint","repeat","smoothPaint","clearInterval","startEvent","Fish","GoldFish","d","addEventListener","push_undo","body","cancelable","handleTouches","touches","Array","from","speciesSizes","Water","Algae","Daphnia","Zoop","Seed","Bacteria","boundingRect","getBoundingClientRect","scaleX","ratio","ceil","devicePixelRatio","scaleY","canvasLeft","left","canvasTop","top","x","floor","y","Info","href","BrowseRouter","match","location","Browse","AdminRouter","Admin","SigninRouter","SignInScreen","ReactDOM","path","component","exact","WebGL","canvasId","res","opts","stencil","premultipliedAlpha","gl","textures","mIs20","WebGLRenderingContext","vertexShader","mDerivatives","mShaderTextureLOD","fragmentShader","getExtension","replace","shader","linkShader","vertexAttribute","getAttribLocation","enableVertexAttribArray","innerHeight","innerWidth","setAttribute","vertexBuffer","createVBO","running","time0","stride","vertexData","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","itemSize","numItems","vertexSource","fragmentSource","program","createProgram","attachShader","compileShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","showLogProgram","uniformLocation","getUniformLocation","shaderType","source","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","type","showLog","Date","getTime","compilationLog","getShaderInfoLog","getProgramInfoLog","channelNumber","createTexture","image","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","err","c","concat","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","_start","timePreviousFrame","disable","DEPTH_TEST","viewport","useProgram","gameTime","time","channel","clear","DEPTH_BUFFER_BIT","vertexAttribPointer","FLOAT","activeTexture","TEXTURE0","uniform1i","uniform3f","uniform1f","drawArrays","TRIANGLE_STRIP","h","drawBowl","Glass","Wood","canvasSize","ui","resize","screen_width","canvasStyle","uiStyle","sky","webGL","sky_ratio","loadTexture","start","error","frame","drawPlot","plotcanvas","max_readings","recordDataPoint","total_gas","p","u","renderLoop","max_tick_per_frame","dayTime","set_time","animWebationId","requestAnimationFrame","load","module","exports","cachedTextDecoder","TextDecoder","cachegetUint8Memory","getStringFromWasm","ptr","len","decode","wasm","subarray","what","freeze","Stone","Plant","FishTail","GoldFishTail","Nitrogen","Waste","Bubble","Biofilm","brightness","dx","dy","v","obj","create","prototype","ret","__wrap","__wbg_random_09364f2d8647f133","Error","__wbindgen_throw","arg0","arg1","timeout","setTimeout","classList","handleActivity","clearTimeout","remove"],"mappings":"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","file":"2.30c0181aeb4638326062.js","sourcesContent":["const reglBuilder = require(\"regl\");\nimport { memory } from \"../crate/pkg/sandtable_bg\";\nwindow.memory = memory;\nimport { Species } from \"../crate/pkg/sandtable\";\nimport { Universe } from \"../crate/pkg\";\n\nlet fsh = require(\"./glsl/sand.glsl\");\nlet vsh = require(\"./glsl/sandVertex.glsl\");\n\nlet startWebGL = ({ canvas, universe, isSnapshot = false }) => {\n  const regl = reglBuilder({\n    canvas,\n    attributes: { preserveDrawingBuffer: isSnapshot }\n  });\n  // const lastFrame = regl.texture();\n  const width = universe.width();\n  const height = universe.height();\n  let cell_pointer = universe.cells();\n  let light_pointer = universe.lights();\n  let cells = new Uint8Array(memory.buffer, cell_pointer, width * height * 4);\n  let lights = new Uint8Array(memory.buffer, light_pointer, width * height * 4);\n  const dataTexture = regl.texture({ width, height, data: cells });\n  const lightTexture = regl.texture({ width, height, data: lights });\n\n  let drawSand = regl({\n    blend: {\n      enable: true,\n      func: {\n        srcRGB: \"src alpha\",\n        srcAlpha: 1,\n        dstRGB: \"one minus src alpha\",\n        dstAlpha: 1\n      },\n      equation: {\n        rgb: \"add\",\n        alpha: \"add\"\n      },\n      color: [0, 0, 0, 0]\n    },\n    frag: fsh,\n    uniforms: {\n      t: ({ tick }) => tick,\n      dataTexture: () => {\n        cell_pointer = universe.cells();\n        cells = new Uint8Array(memory.buffer, cell_pointer, width * height * 4);\n\n        return dataTexture({ width, height, data: cells });\n      },\n      lightTexture: () => {\n        light_pointer = universe.lights();\n\n        lights = new Uint8Array(\n          memory.buffer,\n          light_pointer,\n          width * height * 4\n        );\n\n        return lightTexture({ width, height, data: lights });\n      },\n      resolution: ({ viewportWidth, viewportHeight }) => [\n        viewportWidth,\n        viewportHeight\n      ],\n      dpi: 4,\n      isSnapshot\n      // backBuffer: lastFrame\n    },\n\n    vert: vsh,\n    attributes: {\n      // Full screen triangle\n      position: [[-1, 4], [-1, -1], [4, -1]]\n    },\n    // Our triangle has 3 vertices\n    count: 3\n  });\n\n  return () => {\n    regl.poll();\n    drawSand();\n  };\n};\n\nlet snapshot = universe => {\n  let canvas = document.createElement(\"canvas\");\n  canvas.width = universe.width() / 2;\n  canvas.height = universe.height() / 2;\n  let render = startWebGL({ universe, canvas, isSnapshot: true });\n  render();\n\n  return canvas.toDataURL(\"image/png\");\n};\n\nlet pallette = () => {\n  let canvas = document.createElement(\"canvas\");\n\n  let species = Object.values(Species);\n  let range = Math.max(...species) + 1;\n  let universe = Universe.new(range, 1);\n  canvas.width = range;\n  canvas.height = 3;\n  universe.reset();\n\n  species.forEach(id => universe.paint(id, 0, 2, id));\n  universe.paint(species.Air, 0, 2, species.Air);\n  let render = startWebGL({ universe, canvas, isSnapshot: true });\n  render();\n  let ctx = canvas.getContext(\"webgl\");\n  let data = new Uint8Array(range * 4);\n  ctx.readPixels(0, 0, range, 1, ctx.RGBA, ctx.UNSIGNED_BYTE, data);\n  let colors = {};\n  species.forEach(id => {\n    let index = id * 4;\n    let color = `rgba(${data[index]},${data[index + 1]}, ${\n      data[index + 2]\n    }, 1.0)`;\n    colors[id] = color;\n  });\n  return colors;\n};\n\nexport { startWebGL, snapshot, pallette };\n","const reglBuilder = require(\"regl\");\n// import { memory } from \"../crate/pkg/sandtable_bg\";\n// window.memory = memory;\n// import { Species } from \"././crate/pkg/sandtable\";\n// import { Universe } from \"../crate/pkg\";\n\nlet fsh = require(\"./glsl/plot.glsl\");\nlet vsh = require(\"./glsl/sandVertex.glsl\");\nlet label = document.getElementById(\"plot-label\");\n\nlet readingsIndex = 0;\nlet n_readings = 0;\nlet max_readings = 60 * 60;\nlet readings = new Uint8Array(max_readings);\nlet throttle = 0;\nlet startPlotter = ({ canvas, universe }) => {\n  const regl = reglBuilder({\n    canvas\n  });\n  const width = max_readings / 4;\n  const height = 1;\n\n  const dataTexture = regl.texture({\n    width,\n    height,\n    data: readings\n  });\n  let recordDataPoint = () => {\n    if (throttle++ != 0) {\n      throttle = throttle % 20;\n      return;\n    }\n    readings[readingsIndex] = (255 * universe.o2()) / universe.total_gas();\n    readingsIndex = (readingsIndex + 1) % max_readings;\n    n_readings = Math.max(readingsIndex, n_readings);\n    let p = (n_readings * 100) / max_readings;\n    canvas.style = `transform: translateX(${p - 100}%)`;\n    label.style = `transform: translateX(${p - 100}%)`;\n  };\n  let drawPlot = regl({\n    blend: {\n      enable: true,\n      func: {\n        srcRGB: \"src alpha\",\n        srcAlpha: 1,\n        dstRGB: \"one minus src alpha\",\n        dstAlpha: 1\n      },\n      equation: {\n        rgb: \"add\",\n        alpha: \"add\"\n      },\n      color: [0, 0, 0, 0]\n    },\n    frag: fsh,\n    uniforms: {\n      t: ({ tick }) => tick,\n      i: () => readingsIndex,\n      n_readings: () => n_readings,\n      max_readings,\n      data: () => {\n        // console.log(readings);\n        return dataTexture({\n          width,\n          height,\n          data: readings\n        });\n      },\n\n      resolution: ({ viewportWidth, viewportHeight }) => [\n        viewportWidth,\n        viewportHeight\n      ],\n      dpi: 4\n    },\n\n    vert: vsh,\n    attributes: {\n      // Full screen triangle\n      position: [[-1, 4], [-1, -1], [4, -1]]\n    },\n    // Our triangle has 3 vertices\n    count: 3\n  });\n\n  return {\n    drawPlot: () => {\n      regl.poll();\n      drawPlot();\n    },\n    recordDataPoint\n  };\n};\n\nexport { startPlotter };\n","const fps = new (class {\n  constructor() {\n    this.fps = document.getElementById(\"fps\");\n    this.frames = [];\n    this.lastFrameTimeStamp = performance.now();\n  }\n\n  render() {\n    // Convert the delta time since the last frame render into a measure\n    // of frames per second.\n    const now = performance.now();\n    const delta = now - this.lastFrameTimeStamp;\n    this.lastFrameTimeStamp = now;\n    const fps = (1 / delta) * 1000;\n\n    // Save only the latest 100 timings.\n    this.frames.push(fps);\n    if (this.frames.length > 30) {\n      this.frames.shift();\n    }\n\n    // Find the max, min, and mean of our 100 latest timings.\n    let min = Infinity;\n    let max = -Infinity;\n    let sum = 0;\n    for (let i = 0; i < this.frames.length; i++) {\n      sum += this.frames[i];\n      min = Math.min(this.frames[i], min);\n      max = Math.max(this.frames[i], max);\n    }\n    let mean = sum / this.frames.length;\n\n    // Render the statistics.\n    this.fps.textContent = `FPS:${Math.round(mean)}`;\n    // O2: ${window.u.O2() / 1000}\n    // CO2: ${window.u.CO2() / 1000}`;\n  }\n})();\n\nexport { fps };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Menu = ({ close, children }) => {\n  return (\n    <div className=\"menu-scrim\">\n      <div className={\"menu\"}>\n        {children}\n        <Link to=\"/\" className=\"x\" onClick={close}>\n          <button> x</button>\n        </Link>\n      </div>\n    </div>\n  );\n};\nexport default Menu;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { memory } from \"../../crate/pkg/sandtable_bg\";\nimport { Species } from \"../../crate/pkg/sandtable\";\n\nimport { height, universe, width, reset } from \"../index.js\";\nimport { snapshot, pallette } from \"../render.js\";\n\nimport Menu from \"./menu\";\nlet skiplist = [\"FishTail\", \"Bubble\", \"Waste\", \"Biofilm\", \"GoldFishTail\"];\n\nskiplist.push(\"Plant\");\nskiplist.push(\"Zoop\");\nskiplist.push(\"Nitrogen\");\n\nwindow.species = Species;\nlet pallette_data = pallette();\n\nfunction randomRadius() {\n  return 4 + Math.random() * Math.random() * 12;\n}\nfunction organicRadius() {\n  return `\n  ${randomRadius()}px\n  ${randomRadius()}px\n  ${randomRadius()}px\n  ${randomRadius()}px\n  /\n  ${randomRadius()}px\n  ${randomRadius()}px\n  ${randomRadius()}px\n  ${randomRadius()}px\n  `;\n}\nconst OrganicButton = ({ onClick, className, children }) => {\n  return (\n    <button\n      onClick={onClick}\n      className={className}\n      style={{\n        borderRadius: organicRadius()\n      }}\n    >\n      {children}\n    </button>\n  );\n};\nconst ElementButton = (name, selectedElement, setElement) => {\n  let elementID = Species[name];\n\n  let color = pallette_data[elementID];\n  let selected = elementID == selectedElement;\n\n  let background = \"inherit\";\n  return (\n    <button\n      className={selected ? \"selected\" : \"\"}\n      key={name}\n      onClick={() => {\n        setElement(elementID);\n      }}\n      style={{\n        background,\n        backgroundColor: color,\n        borderRadius: organicRadius(),\n        filter: selected || `saturate(0.5) `\n      }}\n    >\n      {\"  \"}\n      {name}\n      {\"  \"}\n    </button>\n  );\n};\n\nlet sizeMap = [2, 3, 4];\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      submissionMenuOpen: false,\n      paused: false,\n      ff: false,\n      submitting: false,\n      size: 1,\n      dataURL: {},\n      currentSubmission: null,\n      selectedElement: Species.Sand\n    };\n    window.UI = this;\n    // this.load();\n  }\n\n  componentDidUpdate(prevProps) {}\n  togglePause() {\n    window.paused = !this.state.paused;\n    this.setState({ paused: !this.state.paused });\n  }\n  toggleFF() {\n    window.ff = !this.state.ff;\n    this.setState({ ff: !this.state.ff });\n  }\n  play() {\n    window.paused = false;\n    this.setState({ paused: false });\n  }\n  pause() {\n    window.paused = true;\n    this.setState({ paused: true });\n  }\n\n  setSize(event, size) {\n    event.preventDefault();\n    this.setState({\n      size\n    });\n  }\n  reset() {\n    if (window.confirm(\"Reset?\")) {\n      this.play();\n      this.setState({ currentSubmission: null });\n      reset();\n    }\n  }\n  menu() {\n    this.pause();\n    this.setState({ submissionMenuOpen: true });\n  }\n\n  closeMenu() {\n    this.play();\n    this.setState({ submissionMenuOpen: false });\n  }\n  upload() {\n    console.log(\"saving\");\n    // let dataURL = snapshot(universe);\n    const cells = new Uint8Array(\n      memory.buffer,\n      universe.cells(),\n      width * height * 4\n    );\n\n    // Create canvas\n    let canvas = document.createElement(\"canvas\"),\n      context = canvas.getContext(\"2d\"),\n      imgData = context.createImageData(width, height);\n\n    canvas.height = height;\n    canvas.width = width;\n\n    // fill imgData with data from cells\n    for (var i = 0; i < width * height * 4; i++) {\n      if (i % 4 == 3) {\n        imgData.data[i] = 255;\n      } else {\n        imgData.data[i] = cells[i];\n      }\n    }\n    // put data to context at (0, 0)\n    context.putImageData(imgData, 0, 0);\n\n    let cellData = canvas.toDataURL(\"image/png\");\n    let dataString = JSON.stringify(cellData);\n    try {\n      localStorage.setItem(\"cell_data\", dataString);\n      localStorage.setItem(\"o2\", universe.o2());\n    } catch {\n      console.log(\"store failed\");\n    }\n\n    // this.load();\n  }\n\n  load() {\n    console.log(\"loading\");\n\n    var cellData = JSON.parse(localStorage.getItem(\"cell_data\"));\n\n    if (!cellData) {\n      console.log(\"no save\");\n      window.setInterval(this.upload, 1000 * 10);\n\n      return;\n    }\n    if (localStorage.getItem(\"o2\")) {\n      let o2 = parseInt(localStorage.getItem(\"o2\"), 10);\n      universe.set_o2(o2);\n    }\n    // console.log(cellData);\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    // console.log(width, height);\n    var ctx = canvas.getContext(\"2d\");\n    var img = new Image();\n    img.src = cellData;\n    img.onload = () => {\n      // debugger;\n      ctx.drawImage(img, 0, 0);\n      var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n      const cellsData = new Uint8Array(\n        memory.buffer,\n        universe.cells(),\n        width * height * 4\n      );\n\n      universe.reset();\n\n      for (var i = 0; i < width * height * 4; i++) {\n        cellsData[i] = imgData.data[i];\n      }\n    };\n    window.setInterval(this.upload, 1000 * 10);\n\n    // universe.flush_undos();\n    // universe.push_undo();\n    // this.pause();\n  }\n\n  render() {\n    let { size, paused, ff, selectedElement, currentSubmission } = this.state;\n    let hash =\n      currentSubmission && currentSubmission.id\n        ? `#${currentSubmission.id}`\n        : \"\";\n    return (\n      <React.Fragment>\n        <OrganicButton\n          onClick={() => this.togglePause()}\n          className={paused ? \"selected\" : \"\"}\n        >\n          {paused ? (\n            <svg height=\"20\" width=\"20\" id=\"d\" viewBox=\"0 0 300 300\">\n              <polygon id=\"play\" points=\"0,0 , 300,150 0,300\" />\n            </svg>\n          ) : (\n            <svg height=\"20\" width=\"20\" id=\"d\" viewBox=\"0 0 300 300\">\n              <polygon id=\"bar2\" points=\"0,0 110,0 110,300 0,300\" />\n              <polygon id=\"bar1\" points=\"190,0 300,0 300,300 190,300\" />\n            </svg>\n          )}\n        </OrganicButton>\n\n        <OrganicButton\n          onClick={() => this.toggleFF()}\n          className={ff ? \"selected\" : \"\"}\n        >\n          <svg height=\"20\" width=\"20\" id=\"d\" viewBox=\"0 0 300 300\">\n            <polygon id=\"play\" points=\"0,50 , 150,150 0,250\" />\n            <polygon id=\"play\" points=\"150,50, 300,150 150,250\" />\n          </svg>\n        </OrganicButton>\n\n        <OrganicButton onClick={() => this.reset()}>Reset</OrganicButton>\n        {/* <button onClick={() => this.upload()}>upload</button> */}\n        {/* <button onClick={() => this.load()}>load</button> */}\n        <Link\n          to={{\n            pathname: \"/info/\",\n            hash\n          }}\n        >\n          <OrganicButton>Info</OrganicButton>\n        </Link>\n\n        {/* {paused && <button onClick={() => universe.tick()}>Tick</button>} */}\n        {/* <span className=\"sizes\">\n          {sizeMap.map((v, i) => (\n            <button\n              key={i}\n              className={i == size ? \"selected\" : \"\"}\n              onClick={e => this.setSize(e, i)}\n              style={{\n                padding: \"0px\",\n                borderRadius: [\n                  [\"25px\", 0, 0, \"25px\"],\n                  [0, 0, 0, 0],\n                  [0, \"25px\", \"25px\", 0]\n                ][i].join(\" \")\n              }}\n            >\n              <svg height=\"23\" width=\"23\" id=\"d\" viewBox=\"0 0 100 100\">\n                <circle cx=\"50\" cy=\"50\" r={2 + v * 5} />\n              </svg>\n            </button>\n          ))}\n        </span> */}\n        <OrganicButton\n          onClick={() => {\n            reset();\n            universe.pop_undo();\n          }}\n          style={{ fontSize: 35 }}\n        >\n          ↜\n        </OrganicButton>\n        {Object.keys(Species)\n          .filter(name => !skiplist.includes(name))\n          .map(n =>\n            ElementButton(n, selectedElement, id =>\n              this.setState({ selectedElement: id })\n            )\n          )}\n\n        {this.state.currentSubmission && (\n          <div className=\"submission-title\">\n            <button onClick={() => this.incScore()}>\n              +♡{this.state.currentSubmission.data.score}{\" \"}\n            </button>\n            {this.state.currentSubmission.data.title}\n          </div>\n        )}\n\n        {this.state.submissionMenuOpen && (\n          <Menu close={() => this.closeMenu()}>\n            <h4>Share your creation with the people!</h4>\n            <img src={this.state.data.dataURL} className=\"submissionImg\" />\n            <div style={{ display: \"flex\" }}>\n              <input\n                placeholder=\"title\"\n                onChange={e => this.setState({ title: e.target.value })}\n              />\n              <button\n                disabled={this.state.submitting}\n                onClick={() => this.submit()}\n              >\n                Submit\n              </button>\n            </div>\n          </Menu>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport { sizeMap, Index };\n","import { height, universe, width, ratio } from \"./index.js\";\nimport { sizeMap } from \"./components/ui\";\nconst canvas = document.getElementById(\"sand-canvas\");\n\nconst eventDistance = (a, b) => {\n  return Math.sqrt(\n    Math.pow(a.clientX - b.clientX, 2) + Math.pow(a.clientY - b.clientY, 2),\n    2\n  );\n};\n\nconst magnitude = a => {\n  return Math.sqrt(Math.pow(a.clientX, 2) + Math.pow(a.clientY, 2), 2);\n};\n\nconst norm = a => {\n  let mag = magnitude(a);\n  return { clientX: a.clientX / mag, clientY: a.clientY / mag };\n};\nconst scale = (a, s) => {\n  return { clientX: a.clientX * s, clientY: a.clientY * s };\n};\nconst add = (a, b) => {\n  return { clientX: a.clientX + b.clientX, clientY: a.clientY + b.clientY };\n};\nconst sub = (a, b) => {\n  return { clientX: a.clientX - b.clientX, clientY: a.clientY - b.clientY };\n};\n\nlet painting = false;\nlet lastPaint = null;\nlet repeat = null;\n\ncanvas.addEventListener(\"mousedown\", event => {\n  event.preventDefault();\n  universe.push_undo();\n\n  painting = true;\n  clearInterval(repeat);\n  repeat = window.setInterval(() => paint(event), 100);\n  paint(event);\n  lastPaint = event;\n});\n\ndocument.body.addEventListener(\"mouseup\", event => {\n  clearInterval(repeat);\n  if (painting) {\n    event.preventDefault();\n    lastPaint = null;\n    painting = false;\n  }\n});\n\ncanvas.addEventListener(\"mousemove\", event => {\n  clearInterval(repeat);\n  smoothPaint(event);\n});\n\ncanvas.addEventListener(\"mouseleave\", event => {\n  clearInterval(repeat);\n  lastPaint = null;\n});\n\ncanvas.addEventListener(\"touchstart\", event => {\n  universe.push_undo();\n\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n  painting = true;\n  lastPaint = event;\n  handleTouches(event);\n});\n\ncanvas.addEventListener(\"touchend\", event => {\n  if (event.cancelable) {\n    event.preventDefault();\n  }\n  lastPaint = null;\n  painting = false;\n  clearInterval(repeat);\n});\n\ncanvas.addEventListener(\"touchmove\", event => {\n  if (!window.paused) {\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n  }\n  clearInterval(repeat);\n  handleTouches(event);\n});\n\nfunction smoothPaint(event) {\n  clearInterval(repeat);\n  repeat = window.setInterval(() => paint(event), 100);\n  let startEvent = { clientX: event.clientX, clientY: event.clientY };\n  if (!painting) {\n    return;\n  }\n  let size = sizeMap[window.UI.state.size];\n  let i = 0;\n  paint(startEvent);\n  if (\n    lastPaint &&\n    window.UI.state.selectedElement != species.Fish &&\n    window.UI.state.selectedElement != species.GoldFish\n  ) {\n    while (eventDistance(startEvent, lastPaint) > size / 3) {\n      let d = eventDistance(startEvent, lastPaint);\n      startEvent = add(\n        startEvent,\n        scale(norm(sub(lastPaint, event)), Math.min(size / 3, d))\n      );\n      i++;\n      if (i > 1000) {\n        break;\n      }\n      paint(startEvent);\n    }\n  }\n  lastPaint = event;\n}\n\nconst handleTouches = event => {\n  let touches = Array.from(event.touches);\n  if (touches.length == 1) {\n    smoothPaint(touches[0]);\n  } else {\n    touches.forEach(paint);\n  }\n};\n\nlet speciesSizes = {\n  [species.Water]: 13,\n  [species.Sand]: 7,\n\n  [species.Algae]: 2,\n  [species.Fish]: 2,\n  [species.Daphnia]: 2,\n  [species.Zoop]: 2,\n  [species.Seed]: 2,\n  [species.Bacteria]: 2\n};\n\nconst paint = event => {\n  if (!painting) {\n    return;\n  }\n  const boundingRect = canvas.getBoundingClientRect();\n\n  const scaleX =\n    canvas.width /\n    (ratio * Math.ceil(window.devicePixelRatio)) /\n    boundingRect.width;\n  const scaleY =\n    canvas.height /\n    (ratio * Math.ceil(window.devicePixelRatio)) /\n    boundingRect.height;\n\n  const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\n  const canvasTop = (event.clientY - boundingRect.top) * scaleY;\n\n  const x = Math.min(Math.floor(canvasLeft), width - 1);\n  const y = Math.min(Math.floor(canvasTop), height - 1);\n\n  if (window.UI.state.selectedElement < 0) return;\n\n  let size = sizeMap[window.UI.state.size];\n  size = speciesSizes[window.UI.state.selectedElement] || size;\n  universe.paint(x, y, size, window.UI.state.selectedElement);\n};\n","import React from \"react\";\n\nconst Info = () => {\n  return (\n    <div className=\"Info\">\n      <h1>A sealed ecosystem simulation </h1>\n      <p>\n        Created by <a href=\"https://maxbittker.com\">max bittker</a>\n        Work in progress!\n      </p>\n      <p>\n        Source code:{\" \"}\n        <a href=\"https://github.com/MaxBittker/jar\">\n          github.com/maxbittker/jar\n        </a>\n      </p>\n      <p>\n        Based on <a href=\"htts://sandspiel.club\">sandspiel.club</a>\n      </p>{\" \"}\n      <p>\n        <img src=\"https://i.pinimg.com/originals/79/94/0d/79940dd994fb3e901af4265493515d00.jpg\" />\n      </p>\n      background shader: forked from{\" \"}\n      <a href=\"https://www.shadertoy.com/view/tdSXzD\">\n        \"The sun, the sky and the clouds\"\n      </a>{\" \"}\n      by stilltravelling\n    </div>\n  );\n};\n\nexport default Info;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Info from \"./components/info\";\nimport { Index } from \"./components/ui\";\nimport Menu from \"./components/menu\";\n\nfunction BrowseRouter({ match, location }) {\n  return (\n    <Menu>\n      <Browse location={location} />\n    </Menu>\n  );\n}\n\nfunction AdminRouter({ match, location }) {\n  return (\n    <Menu>\n      <Admin location={location} />\n    </Menu>\n  );\n}\n\nfunction SigninRouter({ match, location }) {\n  return (\n    <Menu>\n      <SignInScreen location={location} />\n    </Menu>\n  );\n}\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <Route path=\"/\" component={Index} />\n      <Route\n        exact\n        path=\"/info/\"\n        component={() => (\n          <Menu>\n            <Info />\n          </Menu>\n        )}\n      />\n      <Route path=\"/browse\" component={BrowseRouter} />\n      <Route path=\"/admin\" component={AdminRouter} />\n      <Route path=\"/login\" component={SigninRouter} />\n      <Route path=\"/__/auth/handler\" component={SigninRouter} />\n    </Router>\n  );\n}\n\nReactDOM.render(<AppRouter />, document.getElementById(\"ui\"));\n","let fsh = require(\"./glsl/sky.glsl\");\n\n/*forked from https://github.com/bysse/shadertoy-webgl-harness*/\n// Mixed with some webgl2 code taken from pilibs.js\n// http://iquilezles.org/code/piLibsJS/piLibsJS.htm\nclass WebGL {\n  constructor(canvasId, res) {\n    this.canvas = document.getElementById(canvasId);\n    var opts = {\n      stencil: false,\n      premultipliedAlpha: false\n    };\n\n    var gl = null;\n    if (gl == null) gl = this.canvas.getContext(\"webgl2\", opts);\n    if (gl == null) gl = this.canvas.getContext(\"experimental-webgl2\", opts);\n    if (gl == null) gl = this.canvas.getContext(\"webgl\", opts);\n    if (gl == null) gl = this.canvas.getContext(\"experimental-webgl\", opts);\n    this.gl = gl;\n    this.textures = {};\n    let mIs20 = !(this.gl instanceof WebGLRenderingContext);\n\n    let vertexShader = \"\";\n\n    if (mIs20) {\n      vertexShader +=\n        \"#version 300 es\\n\" +\n        \"#ifdef GL_ES\\n\" +\n        \"precision highp float;\\n\" +\n        \"precision highp int;\\n\" +\n        \"precision mediump sampler3D;\\n\" +\n        \"#endif\\n\" +\n        \"in \";\n    } else {\n      vertexShader +=\n        \"#ifdef GL_ES\\n\" +\n        \"precision highp float;\\n\" +\n        \"precision highp int;\\n\" +\n        \"#endif\\n\" +\n        \"attribute\";\n    }\n    vertexShader +=\n      \" vec4 aPosition; void main() { gl_Position = aPosition; } \";\n    let fragmentShader = \"\";\n\n    let mDerivatives;\n    let mShaderTextureLOD;\n\n    if (mIs20) {\n      mDerivatives = true;\n      mShaderTextureLOD = true;\n    } else {\n      mDerivatives = this.gl.getExtension(\"OES_standard_derivatives\");\n      mShaderTextureLOD = this.gl.getExtension(\"EXT_shader_texture_lod\");\n    }\n\n    if (mIs20) {\n      fragmentShader +=\n        \"#version 300 es\\n\" +\n        \"#ifdef GL_ES\\n\" +\n        \"precision highp float;\\n\" +\n        \"precision highp int;\\n\" +\n        \"precision mediump sampler3D;\\n\" +\n        \"#endif\\n\" +\n        \"out vec4 myOutputColor;\\n\";\n      fsh = fsh.replace(\"gl_FragColor\", \"myOutputColor\");\n    } else {\n      if (mDerivatives) {\n        fragmentShader +=\n          \"#ifdef GL_OES_standard_derivatives\\n#extension GL_OES_standard_derivatives : enable\\n#endif\\n\";\n      }\n      if (mShaderTextureLOD) {\n        fragmentShader += \"#extension GL_EXT_shader_texture_lod : enable\\n\";\n      }\n      fragmentShader +=\n        \"#ifdef GL_ES\\n\" +\n        \"precision highp float;\\n\" +\n        \"precision highp int;\\n\" +\n        \"#endif\\n\" +\n        \"vec4 texture(     sampler2D   s, vec2 c)                   { return texture2D(s,c); }\\n\" +\n        \"vec4 texture(     sampler2D   s, vec2 c, float b)          { return texture2D(s,c,b); }\\n\" +\n        \"vec4 texture(     samplerCube s, vec3 c )                  { return textureCube(s,c); }\\n\" +\n        \"vec4 texture(     samplerCube s, vec3 c, float b)          { return textureCube(s,c,b); }\\n\" +\n        \"float round( float x ) { return floor(x+0.5); }\\n\" +\n        \"vec2 round(vec2 x) { return floor(x + 0.5); }\\n\" +\n        \"vec3 round(vec3 x) { return floor(x + 0.5); }\\n\" +\n        \"vec4 round(vec4 x) { return floor(x + 0.5); }\\n\" +\n        \"float trunc( float x, float n ) { return floor(x*n)/n; }\\n\" +\n        \"mat3 transpose(mat3 m) { return mat3(m[0].x, m[1].x, m[2].x, m[0].y, m[1].y, m[2].y, m[0].z, m[1].z, m[2].z); }\\n\" +\n        \"float determinant( in mat2 m ) { return m[0][0]*m[1][1] - m[0][1]*m[1][0]; }\\n\" +\n        \"float determinant( mat4 m ) { float b00 = m[0][0] * m[1][1] - m[0][1] * m[1][0], b01 = m[0][0] * m[1][2] - m[0][2] * m[1][0], b02 = m[0][0] * m[1][3] - m[0][3] * m[1][0], b03 = m[0][1] * m[1][2] - m[0][2] * m[1][1], b04 = m[0][1] * m[1][3] - m[0][3] * m[1][1], b05 = m[0][2] * m[1][3] - m[0][3] * m[1][2], b06 = m[2][0] * m[3][1] - m[2][1] * m[3][0], b07 = m[2][0] * m[3][2] - m[2][2] * m[3][0], b08 = m[2][0] * m[3][3] - m[2][3] * m[3][0], b09 = m[2][1] * m[3][2] - m[2][2] * m[3][1], b10 = m[2][1] * m[3][3] - m[2][3] * m[3][1], b11 = m[2][2] * m[3][3] - m[2][3] * m[3][2];  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;}\\n\" +\n        \"mat2 inverse(mat2 m) { float det = determinant(m); return mat2(m[1][1], -m[0][1], -m[1][0], m[0][0]) / det; }\\n\" +\n        \"mat4 inverse(mat4 m ) { float inv0 = m[1].y*m[2].z*m[3].w - m[1].y*m[2].w*m[3].z - m[2].y*m[1].z*m[3].w + m[2].y*m[1].w*m[3].z + m[3].y*m[1].z*m[2].w - m[3].y*m[1].w*m[2].z; float inv4 = -m[1].x*m[2].z*m[3].w + m[1].x*m[2].w*m[3].z + m[2].x*m[1].z*m[3].w - m[2].x*m[1].w*m[3].z - m[3].x*m[1].z*m[2].w + m[3].x*m[1].w*m[2].z; float inv8 = m[1].x*m[2].y*m[3].w - m[1].x*m[2].w*m[3].y - m[2].x  * m[1].y * m[3].w + m[2].x  * m[1].w * m[3].y + m[3].x * m[1].y * m[2].w - m[3].x * m[1].w * m[2].y; float inv12 = -m[1].x  * m[2].y * m[3].z + m[1].x  * m[2].z * m[3].y +m[2].x  * m[1].y * m[3].z - m[2].x  * m[1].z * m[3].y - m[3].x * m[1].y * m[2].z + m[3].x * m[1].z * m[2].y; float inv1 = -m[0].y*m[2].z * m[3].w + m[0].y*m[2].w * m[3].z + m[2].y  * m[0].z * m[3].w - m[2].y  * m[0].w * m[3].z - m[3].y * m[0].z * m[2].w + m[3].y * m[0].w * m[2].z; float inv5 = m[0].x  * m[2].z * m[3].w - m[0].x  * m[2].w * m[3].z - m[2].x  * m[0].z * m[3].w + m[2].x  * m[0].w * m[3].z + m[3].x * m[0].z * m[2].w - m[3].x * m[0].w * m[2].z; float inv9 = -m[0].x  * m[2].y * m[3].w +  m[0].x  * m[2].w * m[3].y + m[2].x  * m[0].y * m[3].w - m[2].x  * m[0].w * m[3].y - m[3].x * m[0].y * m[2].w + m[3].x * m[0].w * m[2].y; float inv13 = m[0].x  * m[2].y * m[3].z - m[0].x  * m[2].z * m[3].y - m[2].x  * m[0].y * m[3].z + m[2].x  * m[0].z * m[3].y + m[3].x * m[0].y * m[2].z - m[3].x * m[0].z * m[2].y; float inv2 = m[0].y  * m[1].z * m[3].w - m[0].y  * m[1].w * m[3].z - m[1].y  * m[0].z * m[3].w + m[1].y  * m[0].w * m[3].z + m[3].y * m[0].z * m[1].w - m[3].y * m[0].w * m[1].z; float inv6 = -m[0].x  * m[1].z * m[3].w + m[0].x  * m[1].w * m[3].z + m[1].x  * m[0].z * m[3].w - m[1].x  * m[0].w * m[3].z - m[3].x * m[0].z * m[1].w + m[3].x * m[0].w * m[1].z; float inv10 = m[0].x  * m[1].y * m[3].w - m[0].x  * m[1].w * m[3].y - m[1].x  * m[0].y * m[3].w + m[1].x  * m[0].w * m[3].y + m[3].x * m[0].y * m[1].w - m[3].x * m[0].w * m[1].y; float inv14 = -m[0].x  * m[1].y * m[3].z + m[0].x  * m[1].z * m[3].y + m[1].x  * m[0].y * m[3].z - m[1].x  * m[0].z * m[3].y - m[3].x * m[0].y * m[1].z + m[3].x * m[0].z * m[1].y; float inv3 = -m[0].y * m[1].z * m[2].w + m[0].y * m[1].w * m[2].z + m[1].y * m[0].z * m[2].w - m[1].y * m[0].w * m[2].z - m[2].y * m[0].z * m[1].w + m[2].y * m[0].w * m[1].z; float inv7 = m[0].x * m[1].z * m[2].w - m[0].x * m[1].w * m[2].z - m[1].x * m[0].z * m[2].w + m[1].x * m[0].w * m[2].z + m[2].x * m[0].z * m[1].w - m[2].x * m[0].w * m[1].z; float inv11 = -m[0].x * m[1].y * m[2].w + m[0].x * m[1].w * m[2].y + m[1].x * m[0].y * m[2].w - m[1].x * m[0].w * m[2].y - m[2].x * m[0].y * m[1].w + m[2].x * m[0].w * m[1].y; float inv15 = m[0].x * m[1].y * m[2].z - m[0].x * m[1].z * m[2].y - m[1].x * m[0].y * m[2].z + m[1].x * m[0].z * m[2].y + m[2].x * m[0].y * m[1].z - m[2].x * m[0].z * m[1].y; float det = m[0].x * inv0 + m[0].y * inv4 + m[0].z * inv8 + m[0].w * inv12; det = 1.0 / det; return det*mat4( inv0, inv1, inv2, inv3,inv4, inv5, inv6, inv7,inv8, inv9, inv10, inv11,inv12, inv13, inv14, inv15);}\\n\" +\n        \"float sinh(float x)  { return (exp(x)-exp(-x))/2.; }\\n\" +\n        \"float cosh(float x)  { return (exp(x)+exp(-x))/2.; }\\n\" +\n        \"float tanh(float x)  { return sinh(x)/cosh(x); }\\n\" +\n        \"float coth(float x)  { return cosh(x)/sinh(x); }\\n\" +\n        \"float sech(float x)  { return 1./cosh(x); }\\n\" +\n        \"float csch(float x)  { return 1./sinh(x); }\\n\" +\n        \"float asinh(float x) { return    log(x+sqrt(x*x+1.)); }\\n\" +\n        \"float acosh(float x) { return    log(x+sqrt(x*x-1.)); }\\n\" +\n        \"float atanh(float x) { return .5*log((1.+x)/(1.-x)); }\\n\" +\n        \"float acoth(float x) { return .5*log((x+1.)/(x-1.)); }\\n\" +\n        \"float asech(float x) { return    log((1.+sqrt(1.-x*x))/x); }\\n\" +\n        \"float acsch(float x) { return    log((1.+sqrt(1.+x*x))/x); }\\n\";\n      if (mShaderTextureLOD) {\n        fragmentShader +=\n          \"vec4 textureLod(  sampler2D   s, vec2 c, float b)          { return texture2DLodEXT(s,c,b); }\\n\";\n        fragmentShader +=\n          \"vec4 textureGrad( sampler2D   s, vec2 c, vec2 dx, vec2 dy) { return texture2DGradEXT(s,c,dx,dy); }\\n\";\n      } else {\n        fsh = fsh.replace(\"textureLod\", \"texture\");\n      }\n    }\n\n    fragmentShader += fsh;\n    // console.log(fragmentShader);\n    this.shader = WebGL.linkShader(this.gl, vertexShader, fragmentShader);\n    this.shader.vertexAttribute = this.gl.getAttribLocation(\n      this.shader,\n      \"aPosition\"\n    );\n    this.gl.enableVertexAttribArray(this.shader.vertexAttribute);\n\n    this.height = window.innerHeight / res;\n    this.width = window.innerWidth / res;\n    this.canvas.setAttribute(\"width\", this.width);\n    this.canvas.setAttribute(\"height\", this.height);\n\n    this.vertexBuffer = WebGL.createVBO(this.gl, 3, [\n      1.0,\n      1.0,\n      0.0,\n      -1.0,\n      1.0,\n      0.0,\n      1.0,\n      -1.0,\n      0.0,\n      -1.0,\n      -1.0,\n      0.0\n    ]);\n    this.running = false;\n    this.time0 = 0.0;\n  }\n\n  loadTexture(channelNumber, source) {\n    var texture = this.gl.createTexture();\n    var gl = this.gl;\n    texture.image = new Image();\n    texture.image.onload = () => {\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n      try {\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          texture.image\n        );\n      } catch (err) {\n        console.log(`ERROR: Failed to load texture ${source} : ${err}`);\n\n        console.log(`INFO: Generating placeholder texture for ${source}`);\n        var w = 64,\n          bw = 4,\n          data = [];\n        for (var y = 0; y < w; y++) {\n          for (var x = 0; x < w; x++) {\n            var ix = parseInt(x / bw),\n              iy = parseInt(y / bw);\n            var c = 0xff * ((ix + iy) % 2);\n            data = data.concat([c, c, c, 0xff]);\n          }\n        }\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          w,\n          w,\n          0,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          new Uint8Array(data)\n        );\n      }\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n\n      this.textures[channelNumber] = texture;\n    };\n    texture.image.src = source;\n  }\n\n  start() {\n    if (this.running) {\n      return;\n    }\n\n    this._start();\n  }\n\n  _start() {\n    this.running = true;\n    this.time0 = WebGL.getTime();\n    this.timePreviousFrame = this.time0;\n\n    this.gl.disable(this.gl.DEPTH_TEST);\n    this.gl.viewport(0, 0, this.width, this.height);\n    this.gl.useProgram(this.shader);\n  }\n\n  stop() {\n    this.running = false;\n  }\n\n  frame(gameTime) {\n    let gl = this.gl;\n    if (!this.running) {\n      return;\n    }\n\n    let shader = this.shader;\n    let time = WebGL.getTime() - this.time0;\n    let dt = time - this.timePreviousFrame;\n    this.timePreviousFrame = time;\n\n    gl.clear(gl.DEPTH_BUFFER_BIT);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.vertexAttribPointer(\n      shader.vertexAttribute,\n      this.vertexBuffer.itemSize,\n      gl.FLOAT,\n      false,\n      0,\n      0\n    );\n\n    // set texture\n    for (var channel in this.textures) {\n      var texture = this.textures[channel];\n      gl.activeTexture(gl.TEXTURE0 + parseInt(channel));\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.uniform1i(\n        gl.getUniformLocation(shader, \"iChannel\" + channel),\n        channel\n      );\n    }\n\n    // update uniforms\n    gl.uniform3f(\n      gl.getUniformLocation(shader, \"iResolution\"),\n      this.width,\n      this.height,\n      0\n    );\n    gl.uniform1f(gl.getUniformLocation(shader, \"iGlobalTime\"), time); // legacy support\n    gl.uniform1f(gl.getUniformLocation(shader, \"iTime\"), time);\n    gl.uniform1f(gl.getUniformLocation(shader, \"gameTime\"), gameTime);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, this.vertexBuffer.numItems);\n  }\n\n  static createVBO(gl, stride, vertexData) {\n    var vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(vertexData),\n      gl.STATIC_DRAW\n    );\n    vertexBuffer.itemSize = stride;\n    vertexBuffer.numItems = vertexData.length / stride;\n    return vertexBuffer;\n  }\n\n  static linkShader(gl, vertexSource, fragmentSource) {\n    var program = gl.createProgram();\n    gl.attachShader(\n      program,\n      WebGL.compileShader(gl, gl.VERTEX_SHADER, vertexSource)\n    );\n    gl.attachShader(\n      program,\n      WebGL.compileShader(gl, gl.FRAGMENT_SHADER, fragmentSource)\n    );\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      WebGL.showLogProgram(gl, program);\n      throw `Failed to link shader!`;\n    }\n\n    program.uniformLocation = (gl, name) =>\n      gl.getUniformLocation(program, name);\n\n    return program;\n  }\n\n  static compileShader(gl, shaderType, source) {\n    var shader = gl.createShader(shaderType);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      let type =\n        shaderType == gl.VERTEX_SHADER ? \"vertex shader\" : \"fragment shader\";\n      WebGL.showLog(gl, shader);\n      throw `Failed to compile ${type}`;\n    }\n    return shader;\n  }\n\n  static getTime() {\n    return 0.001 * new Date().getTime();\n  }\n  static showLog(gl, shader) {\n    var compilationLog = gl.getShaderInfoLog(shader);\n    console.log(\"ERROR: \" + compilationLog);\n  }\n  static showLogProgram(gl, program) {\n    var compilationLog = gl.getProgramInfoLog(program);\n    console.log(\"ERROR: \" + compilationLog);\n  }\n}\n\nfunction startSky(res) {\n  var webGL = new WebGL(\"sky-canvas\", res);\n  webGL.loadTexture(0, \"assets/noise.png\");\n\n  webGL.start();\n  return webGL;\n}\n\nexport { startSky };\n","import { Universe, Species } from \"../crate/pkg\";\n\nimport { startWebGL } from \"./render\";\nimport { startPlotter } from \"./plot\";\nimport { fps } from \"./fps\";\nimport {} from \"./paint\";\nimport {} from \"./app\";\nimport {} from \"./setup\";\nimport { startSky } from \"./shaderToy\";\n\nlet n = 200;\nlet h = n / 2;\nlet d = n - 6;\n\nconst universe = Universe.new(n, n);\n\nfunction drawBowl() {\n  universe.paint(h, h, d + 2, Species.Glass);\n  universe.paint(h - 30, d - 3, 20, Species.Wood);\n  universe.paint(h + 30, d - 3, 20, Species.Wood);\n  universe.paint(h, h, d - 2, Species.Air);\n}\n\ndrawBowl();\n// for (var x = 30; x < d - 30; x += 10) {\n// universe.paint(x, h * 1.2, h, Species.Water);\n// }\n\n// for (var x = 0; x < d; x += 10) {\n// universe.paint(x, n - 50, 40, Species.Sand);\n// }\n// universe.paint(h, h, h * 0.9, Species.Water);\n\n// universe.paint(h, h, 2, Species.Zoop);\n// universe.paint(h + 20, h, 2, Species.Fish);\n// universe.paint(h, h * 1.2, 2, Species.Bacteria);\n// universe.paint(h * 1.5, h * 1.2, 2, Species.Seed);\n\n// universe.paint(h, h, 10, Species.Algae);\n\n// universe.paint(150, 50, 25, Species.Seed);\nlet ratio = 2;\nlet width = n;\nlet height = n;\nconst canvas = document.getElementById(\"sand-canvas\");\n\ncanvas.height = n * ratio * Math.ceil(window.devicePixelRatio);\ncanvas.width = n * ratio * Math.ceil(window.devicePixelRatio);\n\nconst ui = document.getElementById(\"ui\");\nlet canvasSize;\nlet resize = () => {\n  let screen_width = window.innerWidth;\n  let uiheight = 50;\n  let screen_height = window.innerHeight - uiheight;\n\n  let canvasStyle = \"\";\n  let uiStyle = \"\";\n  if (screen_width > screen_height) {\n    if (screen_width - window.innerHeight < 400) {\n      // landscape compressed\n      canvasStyle = `height: ${window.innerHeight}px; margin:3px`;\n      canvasSize = window.innerHeight;\n      uiStyle = `width: ${screen_width -\n        window.innerHeight -\n        12}px; margin: 2px;`;\n    } else {\n      // landscape wide\n      canvasStyle = `height: ${window.innerHeight}px`;\n      canvasSize = window.innerHeight;\n\n      uiStyle = `width: ${(screen_width - window.innerHeight) / 2 -\n        7}px; margin: 2px;`;\n    }\n  } else {\n    //portrait (mobile)\n    canvasSize = screen_width;\n\n    canvasStyle = `width: ${screen_width}px; `;\n    uiStyle = \"\";\n  }\n  ui.style = uiStyle;\n  canvas.style = canvasStyle;\n};\n\nresize();\nwindow.addEventListener(\"deviceorientation\", resize, true);\nwindow.addEventListener(\"resize\", resize);\n\nlet drawSand = startWebGL({ canvas, universe });\nlet sky_ratio = canvasSize / n;\n\nlet sky;\ntry {\n  sky = startSky(sky_ratio * 2);\n} catch (e) {\n  console.error(\"skys haunted\");\n  sky = {\n    frame: () => {}\n  };\n}\nlet plotcanvas = document.getElementById(\"plot-canvas\");\nlet { drawPlot, recordDataPoint } = startPlotter({\n  canvas: plotcanvas,\n  universe\n});\n\nlet t = 0;\n\nconst renderLoop = () => {\n  const now = performance.now();\n\n  let max_tick_per_frame = window.ff ? 11 : 1;\n  for (var i = 0; i < max_tick_per_frame; i++) {\n    var dayTime = (t / 50) % 255;\n\n    if (!window.paused) {\n      fps.render(); // new\n\n      universe.tick();\n      t += 1;\n\n      if (dayTime > 70 && dayTime < 170) {\n        t += 10;\n      }\n    }\n    universe.set_time(dayTime);\n\n    recordDataPoint();\n    let elapsed_time = performance.now() - now;\n    if (elapsed_time > 13) {\n      break;\n    }\n  }\n\n  drawSand();\n  sky.frame(dayTime / 255);\n  drawPlot();\n\n  window.animWebationId = requestAnimationFrame(renderLoop);\n};\nfunction reset() {\n  console.log(\"reseting\");\n  localStorage.setItem(\"cell_data\", null);\n  localStorage.setItem(\"o2\", universe.total_gas() / 2);\n  universe.reset();\n  drawBowl();\n}\nwindow.u = universe;\nwindow.universe = universe;\nrenderLoop();\n\nwindow.UI.load();\n// debugger;\nexport { canvas, width, height, ratio, universe, reset };\n","module.exports = \"\\n// boring \\\"pass-through\\\" vertex shader\\nprecision mediump float;\\n#define GLSLIFY 1\\nattribute vec2 position;\\nvarying vec2 uv;\\nvoid main() {\\n  uv = position;\\n  gl_Position = vec4(position, 0, 1);\\n}\"","module.exports = \"precision highp float;\\n#define GLSLIFY 1\\nuniform float t;\\nuniform float dpi;\\nuniform vec2 resolution;\\nuniform bool isSnapshot;\\nuniform sampler2D backBuffer;\\nuniform sampler2D dataTexture;\\nuniform sampler2D lightTexture;\\n\\nvarying vec2 uv;\\n\\n// clang-format off\\nvec3 hsv2rgb(vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_0(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289_0(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute_0(vec4 x) {\\n     return mod289_0(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise_0(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g_0 = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g_0;\\n  vec3 i1 = min( g_0.xyz, l.zxy );\\n  vec3 i2 = max( g_0.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289_0(i);\\n  vec4 p = permute_0( permute_0( permute_0(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\n//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_1(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289_1(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute_1(vec3 x) {\\n  return mod289_1(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise_1(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289_1(i); // Avoid truncation effects in permutation\\n  vec3 p = permute_1( permute_1( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\nhighp float random(vec2 co)\\n{\\n    highp float a = 12.9898;\\n    highp float b = 78.233;\\n    highp float c = 43758.5453;\\n    highp float dt= dot(co.xy ,vec2(a,b));\\n    highp float sn= mod(dt,3.14);\\n    return fract(sin(sn) * c);\\n}\\n\\n// clang-format on\\n\\nvoid main() {\\n  vec3 color;\\n  vec2 grid = floor(uv * (resolution / dpi));\\n\\n  float noise = snoise_0(vec3(grid, t * 0.05));\\n  vec2 noise_2d = vec2(floor(0.5 + noise),\\n                       floor(0.5 + snoise_0(vec3(grid, (t + 20.) * 0.05))));\\n\\n  vec2 textCoord = (uv * vec2(0.5, -0.5)) + vec2(0.5);\\n  vec2 sampleCoord = textCoord + (noise_2d / (resolution / 2.));\\n\\n  vec4 data = texture2D(dataTexture, textCoord);\\n  // vec4 dataSample = texture2D(dataTexture, sampleCoord);\\n\\n  vec4 lightCell = texture2D(lightTexture, textCoord);\\n\\n  float lightValue = lightCell.r;\\n  float blueLightValue = lightCell.b;\\n\\n  vec4 lightSampleCell = texture2D(lightTexture, sampleCoord);\\n  float sampleLightValue = lightSampleCell.r;\\n\\n  lightValue = 0.5 * lightValue + 0.5 * sampleLightValue;\\n  int type = int((data.r * 255.) + 0.1);\\n  float energy = data.g;\\n  float age = data.b;\\n\\n  float hue = 0.0;\\n  float saturation = 0.6;\\n  float lightness = 0.3 + energy * 0.5;\\n  float a = 1.0;\\n  float brightness = 0.0;\\n\\n  if (type == 0) { // Air\\n\\n    hue = 0.0;\\n    saturation = 0.1;\\n    lightness = 0.1;\\n    a = 0.0;\\n    if (isSnapshot) {\\n      saturation = 0.05;\\n      lightness = 1.01;\\n      a = 1.0;\\n    }\\n\\n  } else if (type == 1) { // Glass\\n    hue = 0.1;\\n    saturation = 0.2;\\n    lightness = 1.0;\\n    a = 0.4 + lightValue * 0.3;\\n  } else if (type == 2) { // Sand\\n    hue = 0.1;\\n    saturation = 0.4 + (age * 0.3);\\n    lightness = 1.3 - energy * 1.2;\\n\\n  } else if (type == 3) { // Water\\n    hue = 0.58;\\n    saturation = 0.6;\\n    lightness = 0.5 + energy * 0.25 + noise * 0.1;\\n    a = 0.4;\\n    if (isSnapshot) {\\n      a = 1.0;\\n    }\\n  } else if (type == 4) { // Algae\\n    hue = 0.4 - age * 0.3;\\n    lightness += 0.1;\\n    saturation = 0.5 - (energy * .1);\\n  } else if (type == 5) { // Plant\\n    hue = 0.4;\\n    saturation = 0.4;\\n\\n    if (energy > 45. / 255.) {\\n      hue = 0.48;\\n    }\\n    if (age == 0.) {\\n      // saturation = 0.9;\\n    }\\n    lightness = 0.2 + (1.0 - energy) * 0.4;\\n\\n  } else if (type == 6) { // Zoop\\n    hue = 0.9;\\n    lightness += 0.7;\\n  } else if (type == 7) { // Fish\\n    hue = 0.0;\\n    lightness += 0.4;\\n  } else if (type == 8) { // Bacteria\\n    hue = 0.14;\\n    saturation += 0.2;\\n    lightness += 0.2;\\n    a = 0.5;\\n\\n  } else if (type == 9) { // ???\\n    hue = 0.6;\\n    saturation = 0.4;\\n    lightness = 0.7 + data.g * 0.5;\\n  } else if (type == 10) { // Waste\\n    hue = 0.9;\\n    lightness -= 0.3;\\n    saturation = 0.4;\\n  } else if (type == 11) { // Seed\\n    hue = 0.4;\\n    saturation = 0.4;\\n  } else if (type == 12) { // Stone\\n    hue = -0.4 + (data.g * 0.5);\\n    saturation = 0.1;\\n  } else if (type == 13) { // Wood\\n    hue = (data.g * 0.1);\\n    saturation = 0.3;\\n    lightness = 0.3 + data.g * 0.3;\\n  } else if (type == 14) { // Egg\\n    hue = 0.9;\\n    saturation = age / 3.;\\n    lightness = 1.0;\\n    a = 0.8;\\n\\n  } else if (type == 15) { // Tail\\n    hue += fract(age * 1.9 * 255. / 8.) * 0.2;\\n    lightness += 0.4;\\n    saturation -= (fract(age * 1.9 * 255. / 8.) - 0.1) * 0.7;\\n\\n    // saturation += fract(age * 255.*6.);\\n  } else if (type == 16) { // bubble\\n\\n    hue = 0.0;\\n    saturation = 0.1;\\n    lightness = 0.1;\\n    a = 0.0;\\n    if (isSnapshot) {\\n      saturation = 0.05;\\n      lightness = 1.01;\\n      a = 1.0;\\n    }\\n  } else if (type == 17) { // biofilm\\n    hue = 0.48;\\n    saturation = 0.6;\\n    lightness = 0.5 + energy * 0.25 + noise * 0.1;\\n    a = 0.4;\\n    if (isSnapshot) {\\n      a = 1.0;\\n    }\\n  } else if (type == 18) { // goldfish\\n    hue = 0.1;\\n    lightness += 0.4;\\n    saturation = 0.7;\\n  } else if (type == 19) { // goldfishtail\\n    hue = 0.1;\\n    hue += fract(age * 1.9 * 255. / 9.) * 0.1;\\n    lightness += 0.8;\\n    saturation = 0.8;\\n    saturation -= (fract(age * 1.9 * 255. / 7.) - 0.1) * 0.6;\\n  }\\n\\n  // } else if (type == 16) { // oil\\n  //   hue = (data.g * 5.0) + t * .008;\\n\\n  //   saturation = 0.2;\\n  //   lightness = 0.3;\\n  // } else if (type == 17) { // Rocket\\n  //   hue = 0.0;\\n  //   saturation = 0.4 + data.b;\\n  //   lightness = 0.9;\\n  // } else if (type == 18) { // fungus\\n  //   hue = (data.g * 0.15) - 0.1;\\n  //   saturation = (data.g * 0.8) - 0.05;\\n\\n  //   // (data.g * 0.00);\\n  //   lightness = 1.5 - (data.g * 0.2);\\n  // } else if (type == 19) { // seed/flower\\n\\n  //   hue = fract(fract(data.b * 2.) * 0.5) - 0.3;\\n  //   saturation = 0.7 * (data.g + 0.4) + data.b * 0.2;\\n  //   lightness = 0.9 * (data.g + 0.9);\\n  // }\\n  if (isSnapshot == false) {\\n    lightness *= (0.975 + snoise_1(floor(uv * resolution / dpi)) * 0.025);\\n  }\\n  lightness += lightValue / 2.;\\n  saturation = min(saturation, 1.0);\\n  lightness = min(lightness, 1.0);\\n  color = hsv2rgb(vec3(hue, saturation, lightness));\\n\\n  color += vec3(0.25, 0.25, 0.7) * 0.6 * (blueLightValue + lightSampleCell.b);\\n  a += blueLightValue + lightSampleCell.b;\\n  gl_FragColor = vec4(color, a);\\n}\"","module.exports = \"precision highp float;\\n#define GLSLIFY 1\\nuniform float t;\\nuniform float i;\\nuniform float max_readings;\\nuniform float n_readings;\\nuniform float dpi;\\nuniform vec2 resolution;\\nuniform sampler2D data;\\n\\nvarying vec2 uv;\\n\\n// clang-format off\\nvec3 hsv2rgb(vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_1(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289_1(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute_1(vec4 x) {\\n     return mod289_1(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise_1(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g_0 = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g_0;\\n  vec3 i1 = min( g_0.xyz, l.zxy );\\n  vec3 i2 = max( g_0.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289_1(i);\\n  vec4 p = permute_1( permute_1( permute_1(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\n//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_0(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289_0(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute_0(vec3 x) {\\n  return mod289_0(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise_0(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289_0(i); // Avoid truncation effects in permutation\\n  vec3 p = permute_0( permute_0( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\nhighp float random(vec2 co)\\n{\\n    highp float a = 12.9898;\\n    highp float b = 78.233;\\n    highp float c = 43758.5453;\\n    highp float dt= dot(co.xy ,vec2(a,b));\\n    highp float sn= mod(dt,3.14);\\n    return fract(sin(sn) * c);\\n}\\n\\n// clang-format on\\n\\nvoid main() {\\n  vec3 color;\\n  vec2 grid = floor(uv * resolution / dpi);\\n  vec2 pixel = 1. / resolution;\\n  vec2 pos = (uv + vec2(1.0)) * 0.5;\\n\\n  pos.x = fract(pos.x + i / max_readings);\\n  vec2 textCoord = vec2(pos.x, 0.5);\\n  //   vec2 textCoord = (uv * vec2(0.5, 0)) + vec2(0.5);\\n\\n  vec4 data = texture2D(data, textCoord);\\n  float v = data.x;\\n\\n  float a = 1.0;\\n\\n  //   vec2 pos+= (i*4.)/max_readings;\\n  //   lightness = min(lightness, 1.0);\\n  vec3 green = vec3(0., 1.0, 0.);\\n  gl_FragColor = vec4(1.,1.,1.0,0.5);\\n\\n  //   if (\\n  if (pos.x < n_readings / max_readings && abs(v - pos.y) < pixel.y * 2.0) {\\n    gl_FragColor = vec4(hsv2rgb(vec3(-0.1 + v*0.8, 0.5, 0.5)), 1.0);\\n\\n  } else {\\n    if (abs(uv.y) < pixel.y * 3. && mod(grid.x, 8.0) > 4.0) {\\n      gl_FragColor = vec4(0., 0., 0., 1.0);\\n    }\\n    //     if (abs((i * 4. / max_readings) - pos.x) < pixel.x * 1.) {\\n    //       gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\\n\\n    //     } else {\\n    //     }\\n  }\\n}\"","import * as wasm from './sandtable_bg.wasm';\n\nfunction notDefined(what) { return () => { throw new Error(`${what} is not defined`); }; }\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n/**\n*/\nexport const Species = Object.freeze({ Air:0,Glass:1,Sand:2,Stone:12,Wood:13,Water:3,Algae:4,Zoop:6,Daphnia:14,Seed:11,Plant:5,Bacteria:8,Fish:7,FishTail:15,GoldFish:18,GoldFishTail:19,Nitrogen:9,Waste:10,Bubble:16,Biofilm:17, });\n/**\n*/\nexport class Cell {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_cell_free(ptr);\n    }\n}\n/**\n*/\nexport class Light {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_light_free(ptr);\n    }\n}\n/**\n*/\nexport class Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_universe_free(ptr);\n    }\n    /**\n    */\n    reset() {\n        wasm.universe_reset(this.ptr);\n    }\n    /**\n    */\n    calculate_light() {\n        wasm.universe_calculate_light(this.ptr);\n    }\n    /**\n    * @param {number} brightness\n    * @param {number} x\n    * @param {number} y\n    * @param {number} dx\n    * @param {number} dy\n    */\n    cast_ray(brightness, x, y, dx, dy) {\n        wasm.universe_cast_ray(this.ptr, brightness, x, y, dx, dy);\n    }\n    /**\n    */\n    tick() {\n        wasm.universe_tick(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        const ret = wasm.universe_width(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        const ret = wasm.universe_height(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    o2() {\n        const ret = wasm.universe_o2(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    total_gas() {\n        const ret = wasm.universe_total_gas(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    co2() {\n        const ret = wasm.universe_co2(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    cells() {\n        const ret = wasm.universe_cells(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    lights() {\n        const ret = wasm.universe_lights(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} x\n    * @param {number} y\n    * @param {number} size\n    * @param {number} species\n    */\n    paint(x, y, size, species) {\n        wasm.universe_paint(this.ptr, x, y, size, species);\n    }\n    /**\n    */\n    push_undo() {\n        wasm.universe_push_undo(this.ptr);\n    }\n    /**\n    */\n    pop_undo() {\n        wasm.universe_pop_undo(this.ptr);\n    }\n    /**\n    */\n    flush_undos() {\n        wasm.universe_flush_undos(this.ptr);\n    }\n    /**\n    * @param {number} t\n    */\n    set_time(t) {\n        wasm.universe_set_time(this.ptr, t);\n    }\n    /**\n    * @param {number} v\n    */\n    set_o2(v) {\n        wasm.universe_set_o2(this.ptr, v);\n    }\n    /**\n    */\n    inc_time() {\n        wasm.universe_inc_time(this.ptr);\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @returns {Universe}\n    */\n    static new(width, height) {\n        const ret = wasm.universe_new(width, height);\n        return Universe.__wrap(ret);\n    }\n}\n\nexport const __wbg_random_09364f2d8647f133 = typeof Math.random == 'function' ? Math.random : notDefined('Math.random');\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm(arg0, arg1));\n};\n\n","// if (window.safari) {\n//   history.pushState(null, null, location.href);\n//   window.onpopstate = function(event) {\n//     history.go(1);\n//   };\n// }\n\nlet background = document.getElementById(\"background\");\n\nlet timeout = window.setTimeout(() => {\n  document.body.classList.add(\"faded\");\n}, 12 * 1000);\nlet handleActivity = e => {\n  window.clearTimeout(timeout);\n  document.body.classList.remove(\"faded\");\n  timeout = window.setTimeout(() => {\n    document.body.classList.add(\"faded\");\n  }, 12 * 1000);\n};\ndocument.body.addEventListener(\"mousemove\", handleActivity);\ndocument.body.addEventListener(\"touchstart\", handleActivity);\n\nbackground.addEventListener(\"touchmove\", e => {\n  if (!window.paused) {\n    if (e.cancelable) {\n      e.preventDefault();\n    }\n  }\n});\n\n// if (\"serviceWorker\" in navigator) {\n//   window.addEventListener(\"load\", () => {\n//     navigator.serviceWorker\n//       .register(\"/service-worker.js\")\n//       .then(registration => {\n//         console.log(\"SW registered: \", registration);\n//       })\n//       .catch(registrationError => {\n//         console.log(\"SW registration failed: \", registrationError);\n//       });\n//   });\n// }\n","module.exports = \"#define GLSLIFY 1\\n// clang-format off\\n\\nuniform vec3 iResolution;\\nuniform float iGlobalTime, iTime, gameTime;\\nuniform sampler2D iChannel0;\\n// Appropriated with love & respect from:///\\n// The sun, the sky and the clouds. By StillTravelling\\n// https://www.shadertoy.com/view/tdSXzD\\n// Very much a messy hack sorry!!\\n\\n// Many Thank yous go to the below for their amazing work\\n// Day and night sky cycle. By László Matuska (@BitOfGold)\\n// Creates a sky texture for a skydome\\n// https://www.shadertoy.com/view/ltlSWB\\n\\n// Weather. By David Hoskins, May 2014.\\n// https://www.shadertoy.com/view/4dsXWn\\n\\n// Edge of atmosphere by dmytro rubalskyi (ruba)\\n// https://www.shadertoy.com/view/XlXGzB\\n\\n// Auroras by nimitz\\n// https://www.shadertoy.com/view/XtGGRt\\n\\n// Sorry to those I've missed out!!\\n\\n#define ORIG_CLOUD 0\\n#define ENABLE_RAIN 0 // enable rain drops on screen\\n#define SIMPLE_SUN 0\\n#define NICE_HACK_SUN 1\\n#define SOFT_SUN 1\\n#define cloudy 0.5 // 0.0 clear sky\\n#define haze 0.01 * (cloudy * 20.)\\n#define rainmulti 5.0 // makes clouds thicker\\n#define rainy (10.0 - rainmulti)\\n#define t iTime\\n#define fov tan(radians(60.0))\\n#define S(x, y, z) smoothstep(x, y, z)\\n#define cameraheight 5e1   // 50.\\n#define mincloudheight 5e3 // 5e3\\n#define maxcloudheight 10e3 // 8e3\\n#define xaxiscloud t * 5e2 // t*5e2 +t left -t right *speed\\n#define yaxiscloud 0.      // 0.\\n#define zaxiscloud t * 6e2 // t*6e2 +t away from horizon -t towards horizon *speed\\n#define cloudnoise 2e-4 // 2e-4\\n\\n// clang-format on\\n\\n//#define cloud2\\n\\n// Performance\\nconst int steps = 16;  // 16 is fast, 128 or 256 is extreme high\\nconst int stepss = 16; // 16 is fast, 16 or 32 is high\\n\\n// Environment\\nconst float R0 = 6360e3; // planet radius //6360e3 actual 6371km\\nconst float Ra = 6380e3; // atmosphere radius //6380e3 troposphere 8 to 14.5km\\nconst float I = 10.;     // sun light power, 10.0 is normal\\nconst float SI = 5.;     // sun intensity for sun\\nconst float g = 0.45;    // light concentration .76 //.45 //.6  .45 is normaL\\nconst float g2 = g * g;\\nconst float PI = 3.14159265358979323846;\\nconst float PI2 = 2. * 3.14159265358979323846;\\n\\nconst float ts = (cameraheight / 2.5e5);\\n\\nconst float s = 0.999; // light concentration for sun\\n#if SOFT_SUN\\nconst float s2 = s;\\n#else\\nconst float s2 = s * s;\\n#endif\\nconst float Hr = 8e3;   // Rayleigh scattering top //8e3\\nconst float Hm = 1.2e3; // Mie scattering top //1.3e3\\n\\nvec3 bM = vec3(21e-6); // normal mie // vec3(21e-6)\\n// vec3 bM = vec3(50e-6); //high mie\\n\\n// Rayleigh scattering (sky color, atmospheric up to 8km)\\nvec3 bR = vec3(5.8e-6, 13.5e-6, 33.1e-6); // normal earth\\n// vec3 bR = vec3(5.8e-6, 33.1e-6, 13.5e-6); //purple\\n// vec3 bR = vec3( 63.5e-6, 13.1e-6, 50.8e-6 ); //green\\n// vec3 bR = vec3( 13.5e-6, 23.1e-6, 115.8e-6 ); //yellow\\n// vec3 bR = vec3( 5.5e-6, 15.1e-6, 355.8e-6 ); //yeellow\\n// vec3 bR = vec3(3.5e-6, 333.1e-6, 235.8e-6 ); //red-purple\\n\\nvec3 C = vec3(0., -R0, 0.);             // planet center\\nvec3 Ds = normalize(vec3(0., 0., -1.)); // sun direction?\\n\\nfloat cloudyhigh = 0.05; // if cloud2 defined\\n\\n#if ORIG_CLOUD\\nfloat cloudnear =\\n    1.0; // 9e3 12e3  //do not render too close clouds on the zenith\\nfloat cloudfar = 1e3; // 15e3 17e3\\n#else\\nfloat cloudnear = 1.0; // 15e3 17e3\\nfloat cloudfar = 70e3; // 160e3  //do not render too close clouds on the horizon\\n                       // 160km should be max for cumulus\\n#endif\\n\\n// AURORA STUFF\\nmat2 mm2(in float a) {\\n  float c = cos(a);\\n  float s = sin(a);\\n  return mat2(c, s, -s, c);\\n}\\n\\nmat2 m2 = mat2(0.95534, 0.29552, -0.29552, 0.95534);\\n\\nfloat tri(in float x) { return clamp(abs(fract(x) - .5), 0.01, 0.49); }\\n\\nvec2 tri2(in vec2 p) { return vec2(tri(p.x) + tri(p.y), tri(p.y + tri(p.x))); }\\n\\nfloat triNoise2d(in vec2 p, float spd) {\\n  float z = 1.8;\\n  float z2 = 2.5;\\n  float rz = 0.;\\n  p *= mm2(p.x * 0.06);\\n  vec2 bp = p;\\n  for (float i = 0.; i < 5.; i++) {\\n    vec2 dg = tri2(bp * 1.85) * .75;\\n    dg *= mm2(t * spd);\\n    p -= dg / z2;\\n\\n    bp *= 1.3;\\n    z2 *= 1.45;\\n    z *= .42;\\n    p *= 1.21 + (rz - 1.0) * .02;\\n\\n    rz += tri(p.x + tri(p.y)) * z;\\n    p *= -m2;\\n  }\\n  return clamp(1. / pow(rz * 29., 1.3), 0., .55);\\n}\\n\\nfloat hash21(in vec2 n) {\\n  return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\\n}\\nvec4 aurora(vec3 ro, vec3 rd) {\\n  vec4 col = vec4(0);\\n  vec4 avgCol = vec4(0);\\n  ro *= 1e-5;\\n  float mt = 10.;\\n  for (float i = 0.; i < 5.; i++) {\\n    float of = 0.006 * hash21(gl_FragCoord.xy) * smoothstep(0., 15., i * mt);\\n    float pt = ((.8 + pow((i * mt), 1.2) * .001) - rd.y) / (rd.y * 2. + 0.4);\\n    pt -= of;\\n    vec3 bpos = (ro) + pt * rd;\\n    vec2 p = bpos.zx;\\n    // vec2 p = rd.zx;\\n    float rzt = triNoise2d(p, 0.1);\\n    vec4 col2 = vec4(0, 0, 0, rzt);\\n    col2.rgb =\\n        (sin(1. - vec3(2.15, -.5, 1.2) + (i * mt) * 0.053) * (0.5 * mt)) * rzt;\\n    avgCol = mix(avgCol, col2, .5);\\n    col += avgCol * exp2((-i * mt) * 0.04 - 2.5) * smoothstep(0., 5., i * mt);\\n  }\\n\\n  col *= (clamp(rd.y * 15. + .4, 0., 1.2));\\n  return col * 1.8;\\n}\\n\\n// END AURORA STUFF\\n\\nfloat noise(in vec2 v) {\\n  return 0.5;\\n  //    texture(iChannel0,(v+.5)/256., 0.).r * 0.01;\\n}\\n\\n// by iq\\nfloat Noise(in vec3 x) {\\n  vec3 p = floor(x);\\n  vec3 f = fract(x);\\n  f = f * f * (3.0 - 2.0 * f);\\n\\n  vec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\\n  vec2 rg = textureLod(iChannel0, (uv + 0.5) / 256.0, -100.0).yx;\\n  return mix(rg.x, rg.y, f.z);\\n}\\n\\nfloat fnoise(vec3 p, in float t) {\\n  p *= .25;\\n  float f;\\n\\n  f = 0.5000 * Noise(p);\\n  p = p * 3.02;\\n  p.y -= t * .1; // t*.05 speed cloud changes\\n  f += 0.2500 * Noise(p);\\n  p = p * 3.03;\\n  p.y += t * .06;\\n  f += 0.1250 * Noise(p);\\n  p = p * 3.01;\\n  f += 0.0625 * Noise(p);\\n  p = p * 3.03;\\n  f += 0.03125 * Noise(p);\\n  p = p * 3.02;\\n  f += 0.015625 * Noise(p);\\n  return f;\\n}\\n\\nfloat cloud(vec3 p, in float t) {\\n  float cld = fnoise(p * cloudnoise, t) + cloudy * 0.1;\\n  cld = smoothstep(.4 + .04, .6 + .04, cld);\\n  cld *= cld * (5.0 * rainmulti);\\n  return cld + haze;\\n}\\n\\nvoid densities(in vec3 pos, out float rayleigh, out float mie) {\\n  float h = length(pos - C) - R0;\\n  rayleigh = exp(-h / Hr);\\n  vec3 d = pos;\\n  d.y = 0.0;\\n  float dist = length(d);\\n\\n  float cld = 0.;\\n  if (mincloudheight < h && h < maxcloudheight) {\\n    // cld = cloud(pos+vec3(t*1e3,0., t*1e3),t)*cloudy;\\n    cld = cloud(pos + vec3(xaxiscloud, yaxiscloud, zaxiscloud), t) *\\n          cloudy; // direction and speed the cloud movers\\n    cld *= sin(3.1415 * (h - mincloudheight) / mincloudheight) * cloudy;\\n  }\\n#ifdef cloud2\\n  float cld2 = 0.;\\n  if (12e3 < h && h < 15.5e3) {\\n    cld2 = fnoise(pos * 3e-4, t) *\\n           cloud(pos * 32.0 + vec3(27612.3, 0., -t * 15e3), t);\\n    cld2 *= sin(3.1413 * (h - 12e3) / 12e3) * cloudyhigh;\\n    cld2 = clamp(cld2, 0.0, 1.0);\\n  }\\n\\n#endif\\n\\n#if ORIG_CLOUD\\n  if (dist < cloudfar) {\\n    float factor =\\n        clamp(1.0 - ((cloudfar - dist) / (cloudfar - cloudnear)), 0.0, 1.0);\\n    cld *= factor;\\n  }\\n#else\\n\\n  if (dist > cloudfar) {\\n\\n    float factor =\\n        clamp(1.0 - ((dist - cloudfar) / (cloudfar - cloudnear)), 0.0, 1.0);\\n    cld *= factor;\\n  }\\n#endif\\n\\n  mie = exp(-h / Hm) + cld + haze;\\n#ifdef cloud2\\n  mie += cld2;\\n#endif\\n}\\n\\nfloat escape(in vec3 p, in vec3 d, in float R) {\\n  vec3 v = p - C;\\n  float b = dot(v, d);\\n  float c = dot(v, v) - R * R;\\n  float det2 = b * b - c;\\n  if (det2 < 0.)\\n    return -1.;\\n  float det = sqrt(det2);\\n  float t1 = -b - det, t2 = -b + det;\\n  return (t1 >= 0.) ? t1 : t2;\\n}\\n\\n// this can be explained:\\n// http://www.scratchapixel.com/lessons/3d-advanced-lessons/simulating-the-colors-of-the-sky/atmospheric-scattering/\\nvoid scatter(vec3 o, vec3 d, out vec3 col, out vec3 scat, in float t) {\\n\\n  float L = escape(o, d, Ra);\\n  float mu = dot(d, Ds);\\n  float opmu2 = 1. + mu * mu;\\n  float phaseR = .0596831 * opmu2;\\n  float phaseM = .1193662 * (1. - g2) * opmu2 /\\n                 ((2. + g2) * pow(1. + g2 - 2. * g * mu, 1.5));\\n  float phaseS = .1193662 * (1. - s2) * opmu2 /\\n                 ((2. + s2) * pow(1. + s2 - 2. * s * mu, 1.5));\\n\\n  float depthR = 0., depthM = 0.;\\n  vec3 R = vec3(0.), M = vec3(0.);\\n\\n  float dl = L / float(steps);\\n  for (int i = 0; i < steps; ++i) {\\n    float l = float(i) * dl;\\n    vec3 p = (o + d * l);\\n\\n    float dR, dM;\\n    densities(p, dR, dM);\\n    dR *= dl;\\n    dM *= dl;\\n    depthR += dR;\\n    depthM += dM;\\n\\n    float Ls = escape(p, Ds, Ra);\\n    if (Ls > 0.) {\\n      float dls = Ls / float(stepss);\\n      float depthRs = 0., depthMs = 0.;\\n      for (int j = 0; j < stepss; ++j) {\\n        float ls = float(j) * dls;\\n        vec3 ps = (p + Ds * ls);\\n        float dRs, dMs;\\n        densities(ps, dRs, dMs);\\n        depthRs += dRs * dls;\\n        depthMs += dMs * dls;\\n      }\\n\\n      vec3 A = exp(-(bR * (depthRs + depthR) + bM * (depthMs + depthM)));\\n      R += (A * dR);\\n      M += A * dM;\\n    } else {\\n    }\\n  }\\n\\n  // col = (I) * (R * bR * phaseR + M * bM * (phaseM ));\\n  col = (I) * (M * bM * (phaseM)); // Mie scattering\\n#if NICE_HACK_SUN\\n  col += (SI) * (M * bM * phaseS); // Sun\\n#endif\\n  col += (I) * (R * bR * phaseR); // Rayleigh scattering\\n  scat = 0.1 * (bM * depthM);\\n  // scat = 0.0 + clamp(depthM*5e-7,0.,1.);\\n}\\n\\nvec3 hash33(vec3 p) {\\n  p = fract(p * vec3(443.8975, 397.2973, 491.1871));\\n  p += dot(p.zxy, p.yxz + 19.27);\\n  return fract(vec3(p.x * p.y, p.z * p.x, p.y * p.z));\\n}\\n\\nvec3 stars(in vec3 p) {\\n  vec3 c = vec3(0.);\\n  float res = iResolution.x * 2.5;\\n\\n  for (float i = 0.; i < 4.; i++) {\\n    vec3 q = fract(p * (.15 * res)) - 0.5;\\n    vec3 id = floor(p * (.15 * res));\\n    vec2 rn = hash33(id).xy;\\n    float c2 = 1. - smoothstep(0., .6, length(q));\\n    c2 *= step(rn.x, .0005 + i * i * 0.001);\\n    c +=\\n        c2 * (mix(vec3(1.0, 0.49, 0.1), vec3(0.75, 0.9, 1.), rn.y) * 0.1 + 0.9);\\n    p *= 1.3;\\n  }\\n  return c * c * .8;\\n}\\n\\n// SIMPLE SUN STUFF\\nconst float density = 0.5;\\nconst float zenithOffset = 0.48;\\nconst vec3 skyColor = vec3(0.37, 0.55, 1.0) * (1.0 + 0.0);\\n\\n#define zenithDensity(x) density / pow(max(x - zenithOffset, 0.0035), 0.75)\\n\\nfloat getSunPoint(vec2 p, vec2 lp) {\\n  return smoothstep(0.04 * (fov / 2.0), 0.026 * (fov / 2.0), distance(p, lp)) *\\n         50.0;\\n}\\n\\nfloat getMie(vec2 p, vec2 lp) {\\n  float mytest = lp.y < 0.5 ? (lp.y + 0.5) * pow(0.05, 20.0) : 0.05;\\n  float disk = clamp(1.0 - pow(distance(p, lp), mytest), 0.0, 1.0);\\n  return disk * disk * (3.0 - 2.0 * disk) * 0.25 * PI;\\n}\\n\\nvec3 getSkyAbsorption(vec3 x, float y) {\\n  vec3 absorption = x * y;\\n  absorption = pow(absorption, 1.0 - (y + absorption) * 0.5) / x / y;\\n  return absorption;\\n}\\n\\nvec3 jodieReinhardTonemap(vec3 c) {\\n  float l = dot(c, vec3(0.2126, 0.7152, 0.0722));\\n  vec3 tc = c / (c + 1.0);\\n  return mix(c / (l + 1.0), tc, tc);\\n}\\n\\nvec3 getAtmosphericScattering(vec2 p, vec2 lp) {\\n  float zenithnew = zenithDensity(p.y);\\n  float sunPointDistMult =\\n      clamp(length(max(lp.y + 0.1 - zenithOffset, 0.0)), 0.0, 1.0);\\n  vec3 absorption = getSkyAbsorption(skyColor, zenithnew);\\n  vec3 sunAbsorption = getSkyAbsorption(skyColor, zenithDensity(lp.y + 0.1));\\n  vec3 sun3 = getSunPoint(p, lp) * absorption;\\n  vec3 mie2 = getMie(p, lp) * sunAbsorption;\\n  vec3 totalSky = sun3; //+ mie2;\\n  totalSky *= sunAbsorption * 0.5 + 0.5 * length(sunAbsorption);\\n  vec3 newSky = jodieReinhardTonemap(totalSky);\\n  return newSky;\\n}\\n// END SIMPLE SUN STUFF\\n\\n// RAIN STUFF\\nvec3 N31(float p) {\\n  //  3 out, 1 in... DAVE HOSKINS\\n  vec3 p3 = fract(vec3(p) * vec3(.1031, .11369, .13787));\\n  p3 += dot(p3, p3.yzx + 19.19);\\n  return fract(\\n      vec3((p3.x + p3.y) * p3.z, (p3.x + p3.z) * p3.y, (p3.y + p3.z) * p3.x));\\n}\\n\\nfloat SawTooth(float t) {\\n  return cos(t + cos(t)) + sin(2. * t) * .2 + sin(4. * t) * .02;\\n}\\n\\nfloat DeltaSawTooth(float t) {\\n  return 0.4 * cos(2. * t) + 0.08 * cos(4. * t) -\\n         (1. - sin(t)) * sin(t + cos(t));\\n}\\n\\nvec2 GetDrops(vec2 uv, float seed, float m) {\\n\\n  float t2 = t + m;\\n  vec2 o = vec2(0.);\\n\\n#ifndef DROP_DEBUG\\n  uv.y += t2 * .05;\\n#endif\\n\\n  uv *= vec2(10., 2.5) * 2.;\\n  vec2 id = floor(uv);\\n  vec3 n = N31(id.x + (id.y + seed) * 546.3524);\\n  vec2 bd = fract(uv);\\n\\n  vec2 uv2 = bd;\\n\\n  bd -= 0.5;\\n\\n  bd.y *= 4.;\\n\\n  bd.x += (n.x - .5) * rainy;\\n\\n  t2 += n.z * 6.28;\\n  float slide = SawTooth(t2);\\n\\n  float ts = 1.5;\\n  vec2 trailPos = vec2(bd.x * ts, (fract(bd.y * ts * 2. - t2 * 2.) - .5) * .5);\\n\\n  bd.y += slide * 2.; // make drops slide down\\n\\n#ifdef HIGH_QUALITY\\n  float dropShape = bd.x * bd.x;\\n  dropShape *= DeltaSawTooth(t);\\n  bd.y += dropShape; // change shape of drop when it is falling\\n#endif\\n\\n  float d = length(bd); // distance to main drop\\n\\n  float trailMask = S(-.2, .2, bd.y); // mask out drops that are below the main\\n  trailMask *= bd.y;                  // fade dropsize\\n  float td = length(trailPos * max(.5, trailMask)); // distance to trail drops\\n\\n  float mainDrop = S(.2, .1, d);\\n  float dropTrail = S(.1, .02, td);\\n\\n  dropTrail *= trailMask;\\n  o = mix(bd * mainDrop, trailPos, dropTrail); // mix main drop and drop trail\\n\\n#ifdef DROP_DEBUG\\n  if (uv2.x < .02 || uv2.y < .01)\\n    o = vec2(1.);\\n#endif\\n\\n  return o;\\n}\\n// END RAIN STUFF\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\\n\\n  float AR = iResolution.x / iResolution.y;\\n  //   float YAR = iResolution.y / iResolution.x;\\n  //   float SAR = min(AR, YAR);\\n  //   float BAR = max(AR, YAR);\\n  //   float smallSide = min(iResolution.x, iResolution.y);\\n  //   float bigSide = max(iResolution.x, iResolution.y);\\n  float M = 1.0; // canvas.innerWidth/M //canvas.innerHeight/M --res\\n  vec2 sunPos = vec2(sin(-gameTime * PI2), cos(gameTime * PI2)) * 0.5;\\n  sunPos.x += AR * 0.5;\\n  if (sunPos.y < 0.) {\\n    sunPos.y = sunPos.y / 4.;\\n  }\\n  sunPos.y += 0.5;\\n\\n  // circle = vec2(sin(gameTime*PI2));\\n  vec2 uvMouse = sunPos;\\n  // / iResolution.xy);\\n  // uvMouse.x *= AR;\\n\\n  vec2 uv0 = (fragCoord.xy / iResolution.xy);\\n  uv0 *= M;\\n  // uv0.x *= AR;\\n\\n  vec2 uv = uv0 * (2.0 * M) - (1.0 * M);\\n  uv.x *= AR;\\n\\n  // uvMouse.y=(0.7-(0.05*fov)); //initial view\\n  // uvMouse.x=(1.0-(0.05*fov)); //initial view\\n  // circle+=0.5;\\n  // uvMouse.xy = circle - vec2((0.05*fov));\\n  // uvMouse.xy = vec2(1.0, 0.5);\\n  // uvMouse*= 100.;\\n  // uvMouse += iResolution.xy *0.5;\\n  Ds = normalize(vec3(uvMouse.x - ((0.5 * AR)), uvMouse.y - 0.5, (fov / -2.0)));\\n\\n  vec3 O = vec3(0., cameraheight, 0.);\\n  vec3 D = normalize(vec3(uv, -(fov * M)));\\n\\n  vec3 color = vec3(0.);\\n  vec3 scat = vec3(0.);\\n\\n  // float scat = 0.;\\n  float att = 1.;\\n  float staratt = 1.;\\n  float scatatt = 1.;\\n  vec3 star = vec3(0.);\\n  vec4 aur = vec4(0.);\\n\\n  float fade = smoothstep(0., 0.01, abs(D.y)) * 0.5 + 0.6;\\n\\n  staratt = 1. - min(1.0, (uvMouse.y * 2.0));\\n  scatatt = 1. - min(1.0, (uvMouse.y * 2.2));\\n\\n  if (D.y < -ts) {\\n    float L = -O.y / D.y;\\n    O = O + D * L;\\n    D.y = -D.y;\\n    D = normalize(\\n        D +\\n        vec3(0, .003 * sin(t + 6.2831 * noise(O.xz + vec2(0., -t * 1e3))), 0.));\\n    att = .6;\\n    star = stars(D);\\n    uvMouse.y < 0.5 ? aur = smoothstep(0.0, 2.5, aurora(O, D)) : aur = aur;\\n  } else {\\n    float L1 = O.y / D.y;\\n    vec3 O1 = O + D * L1;\\n\\n    vec3 D1 = vec3(1.);\\n    D1 = normalize(\\n        D + vec3(1.,\\n                 0.0009 * sin(t + 6.2831 * noise(O1.xz + vec2(0., t * 0.8))),\\n                 0.));\\n    star = stars(D1);\\n    uvMouse.y < 0.5 ? aur = smoothstep(0., 1.5, aurora(O, D)) *fade : aur = aur;\\n  }\\n\\n  star *= att;\\n  star *= staratt;\\n\\n  scatter(O, D, color, scat, t);\\n  color *= att;\\n  scat *= att;\\n  scat *= scatatt;\\n\\n// draw the badly implemented sun\\n#if SIMPLE_SUN\\n\\n  vec2 uv1 = (fragCoord.xy / iResolution.xy);\\n  uv1 *= M;\\n  uv1.x *= AR;\\n\\n  vec3 sun2 = getAtmosphericScattering(uv1, vec2(uvMouse.x, uvMouse.y));\\n  color += sun2;\\n#endif\\n\\n  color += scat;\\n  color += star;\\n  //   color=color*(1.-(aur.a)*scatatt) + (aur.rgb*scatatt);\\n  color += aur.rgb * scatatt;\\n\\n#if ENABLE_RAIN\\n  vec2 drops = vec2(0.);\\n  if (rainmulti > 1.0) {\\n    drops = GetDrops(uv / 2.0, 1., 1.);\\n\\n    color += drops.x + drops.y;\\n  }\\n#endif\\n\\n  // float env = pow( smoothstep(.5, iResolution.x / iResolution.y,\\n  // length(uv*0.8)), 0.0);\\n  fragColor = vec4(pow(color, vec3(1.0 / 2.2)), 1.); // gamma correct\\n}\\nvoid main() {\\n  vec4 color = vec4(0.0);\\n  mainImage(color, gl_FragCoord.xy);\\n  gl_FragColor = color;\\n}\\n\""],"sourceRoot":""}